<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Raw Syntax]]></title>
  <link href="http://rawsyntax.com/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2013-11-03T16:30:24-05:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Zsh and Multi-Term]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/"/>
<updated>2013-11-03T15:12:27-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term</id>
<category term="code" /><category term="tools" />

      <content type="html"><![CDATA[<p>I've been experimenting with running <code>multi-term</code> in emacs instead of using an external program like iTerm2.  While <code>multi-term</code> is good, it can have some show-stopping  problems out of the box.  As usual, <a href="http://emacswiki.org">EmacsWiki</a> has some good tips, but there isn't a comprehensive setup all on one page.</p>

<p>View a short demo of this integration <a href="http://www.youtube.com/watch?v=G76ONy6YAPQ">on youtube</a>.</p>

<!--more-->


<h2>Why Multi-Term</h2>

<p>I found <code>eshell</code> to be lacking terminal functionality. It didn't work well for me when trying to use a pager or using screen / tmux.  I chose <code>multi-term</code> because it runs a real terminal and has convenience functions for running multiple terminals, which matches my old workflow in iTerm2.</p>

<h2>Setup Problems</h2>

<p>The first problem I noticed was that <code>multi-term</code> would not display certain colors.  Inspecting <code>$TERM</code> in <code>multi-term</code> revealed that it was set to <code>eterm-color</code>, but my system lacked terminfo for that terminal.  The following command resolves this problem:</p>

<p><code>tic -o ~/.terminfo /Applications/Emacs.app/Contents/Resources/etc/e/eterm-color.ti</code></p>

<p>If your <code>Emacs.app</code> doesn't contain that file, you can try searching your system emacs install for <code>eterm-color.ti</code>.  That file has been included in emacs for many years.</p>

<p>Secondly, it's important to verify which <code>sh</code> multi-term is running against.  I prefer zsh.</p>

<div><script src='https://gist.github.com/rawsyntax/7293750.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293750&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>I also noticed that my default zsh theme includes UTF-8 characters, which aren't displayed correctly by my emacs.  While I haven't found a fix for this, I have added a conditional to my <code>.zshrc</code> to use a more compatible theme inside emacs.</p>

<div><script src='https://gist.github.com/rawsyntax/7293807.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293807&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>Another annoyance is that the default history limit is quite low (only 2048 lines).  If you are feeling lucky, you can set that value to 0, to have an unlimited terminal buffer.  However, you can bring your emacs to a crawl if you have a runaway process in your terminal.  I set mine to 10000 now and plan to increase it if performance is not a problem.</p>

<div><script src='https://gist.github.com/rawsyntax/7293989.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293989&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<h2>Term Mode Customizations</h2>

<p>I have a couple minor-modes I'd like to turn off in <code>term-mode</code>.  A hook is provided for this purpose.</p>

<div><script src='https://gist.github.com/rawsyntax/7293879.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293879&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>I run a couple different terminals with <code>multi-term</code>.  I tried the usual way of binding keys to cycle through terminals with <code>M-[</code> and <code>M-]</code>, but <code>local-set-key</code> and others didn't work.  After reading the <code>multi-term.el</code> source code, I found that <code>multi-term</code> handles key bindings using two lists: <code>term-unbind-key-list</code> and <code>term-bind-key-alist</code>.</p>

<div><script src='https://gist.github.com/rawsyntax/7293942.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293942&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>I customize these with:</p>

<div><script src='https://gist.github.com/rawsyntax/7293933.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293933&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>A note about buffer naming: <code>multi-term-next</code> and <code>multi-term-prev</code> require the terminal buffers to be named in a sequential way.  I tried renaming my terminal buffers and found that the bindings stop working.  Those commands simply implement or decrement the trailing number of the buffer name (e.g. <code>*terminal&lt;1&gt;*</code>).</p>

<p>I also found that yanking / pasting text into a terminal buffer didn't work.  This is frustrating but easily fixed.</p>

<div><script src='https://gist.github.com/rawsyntax/7294123.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7294123&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<h2>Integration</h2>

<p>For ideas on how to integrate terminal actions into your emacs workflow see my <a href="http://rawsyntax.com/blog/learn-emacs-fit-your-workflow/">previous post</a>.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Living with Boxen]]></title>
<link href="http://rawsyntax.com/blog/living-with-boxen/"/>
<updated>2013-07-06T03:23:44-04:00</updated>
<id>http://rawsyntax.com/blog/living-with-boxen</id>
<category term="automation" />

      <content type="html"><![CDATA[<p>About 3 months ago I switched to a new 15" retina macbook pro.  My previous OS X install was nearly 4 years old.  I did not want to clone the data over because too much cruft had built up.  I was left with the question of how to quickly and easily setup a laptop for programming work.  I chose <a href="http://boxen.github.com/">Boxen</a> because it was new, and I wanted a repeatable process for machine setup.</p>

<!--more-->


<h2>Promises</h2>

<p>By and large boxen delivers on its promises.  I was able to setup a system for ruby / web development in about 20 minutes (most of that was spent waiting). Simply</p>

<ul>
<li>Download and install XCode and CLI tools</li>
<li>Setup and run boxen.</li>
</ul>


<p>You get a system with rbenv and ruby installed and a bunch of other useful programs.</p>

<h2>Problems</h2>

<p>However, Boxen isn't perfect. It will require some customization sooner or later as you begin to use it for more tasks. This isn't a bad thing, but it requires you to get used to describing your machine configuration with code (Puppet).</p>

<h3>Default packages are for github</h3>

<div><script src='https://gist.github.com/rawsyntax/5940971.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>The above section in the Puppetfile will install <a href="https://github.com/boxen/puppet-nginx">https://github.com/boxen/puppet-nginx</a> .  However this includes custom sites for the folks who work at github, which is not what I wanted. I elected to install nginx the old way <code>brew install nginx</code>, which gives me a vanilla nginx install.</p>

<h3>Homebrew location</h3>

<p>Boxen has its own homebrew installation at <code>/opt/boxen/homebrew/bin/brew</code>. This can be problematic for other tools that look for stuff installed into <code>/usr/local</code>.</p>

<h3>Separation</h3>

<p>Boxen keeps everything under <code>/opt/boxen</code>, which can cause problems with other tools. For example, Rails 2.3 looks for mysql sockets at <code>/tmp/mysql.sock</code> by default, whereas boxen creates the socket at <code>/opt/boxen/data/mysql/socket</code>.  These problems are easy to remedy (specify the socket path), but are stumbling blocks none the less.  Boxen's mysql also runs on an alternate port: <code>13306</code> not <code>3306</code>.</p>

<h2>Thinking in Boxen</h2>

<p>Boxen requires a change in user behavior. Now, when you make a change to your machine's configuration it should be done within boxen. It should be done in an idempotent way. The benefit here is that your customizations end up codified and versioned. So if you had to you could install your boxen on another machine and be ready to work in about 20 minutes.</p>

<h2>Peace of Mind</h2>

<p>Compute peacefully knowing your setup is versioned and repeatable. I now have scripts for setting up nearly every aspect of my machine. Furthermore, these steps now run faster than doing it manually.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Store Window Configuration]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-store-window-configuration/"/>
<updated>2013-04-16T19:40:23-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-store-window-configuration</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>You may have seen my previous post on <a href="http://rawsyntax.com/blog/learn-emacs-fit-your-workflow/">Learn Emacs: Fit your Workflow</a>.  I've improved the function to bring up a full <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Frames.html">frame</a> eshell buffer, and restore back to previous window configuration with less code.  Previously I was using some complex keyboard macros to try to restore my specific usual frame setup.  This rewritten function will work for any frame setup.</p>

<div><script src='https://gist.github.com/rawsyntax/5400598.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>I owe this tip to <a href="http://whattheemacsd.com/setup-magit.el-01.html">magnars' emacs configuration</a>.</p>

<p>More on <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html">registers here</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: 24.3 released and NEWS]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-24-dot-3-released-and-news/"/>
<updated>2013-03-11T15:29:00-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-24-dot-3-released-and-news</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>Emacs 24.3 was released today.  If you're on OS X, the easiest way to check it out is by downloading a build from <a href="http://emacsformacosx.com/">EmacsForMacOSX</a>.</p>

<p>As for what's new in Emacs 24.3, in true Emacs fashion, we can ask it directly.</p>

<pre><code>M-x view-emacs-news
</code></pre>

<p>If you're using <a href="http://rawsyntax.com/blog/learn-emacs-smex/">Smex</a> M-x will suggest other view-emacs-* commands.</p>

<p>So next time you're wondering about how to do something in Emacs try asking it directly.</p>

<pre><code>M-x info-emacs-manual
</code></pre>

<p>Will view the Emacs manual as <a href="http://en.wikipedia.org/wiki/Info_(Unix)">info pages</a>.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Fit your Workflow]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-fit-your-workflow/"/>
<updated>2013-02-23T17:02:00-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-fit-your-workflow</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<div class="embed video YouTube"><iframe width="480" height="270" src="http://www.youtube.com/embed/nQ0Q_6HZwwY?feature=oembed" frameborder="0" allowfullscreen></iframe></div>


<p>The visor I refer to is a feature of <a href="http://totalterminal.binaryage.com/">TotalTerminal</a>.</p>

<!--more-->


<p>The elisp code is below:</p>

<div><script src='https://gist.github.com/rawsyntax/5021575.js'></script>
<noscript><pre><code></code></pre></noscript></div>




<div><script src='https://gist.github.com/rawsyntax/5021581.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Quicksilver, Secure Keyboard Entry, and Single Modifier Activation]]></title>
<link href="http://rawsyntax.com/blog/quicksilver-secure-keyboard-entry-and-single-modified-activaction/"/>
<updated>2012-11-08T10:55:00-05:00</updated>
<id>http://rawsyntax.com/blog/quicksilver-secure-keyboard-entry-and-single-modified-activaction</id>
<category term="tools" />

      <content type="html"><![CDATA[<p>I use <a href="http://qsapp.com">Quicksilver</a> all the time.  Despite its bugs,
I prefer it to any of the other launcher type programs that exist.
Nevermind the fact that it is more powerful than most of those other
programs (Alfred, LaunchBar, etc).  The single feature that got me
hooked is the ability to bring up the Quicksilver prompt with a single
keypress.  I have it set up to use the command key.</p>

<p><img src="http://rawsyntax.com/images/single-modifier-activation.png" class ="center"/></p>

<p>Other tools like Alfred won't do this (though it does have the command
key double tap).</p>

<!--more-->


<h2>The Problem</h2>

<p>Right around a year ago I started experiencing issues with single
modifier activation not working occasionally.  At first I didn't know
if it was Quicksilver being buggy or what.  Eventually I noticed that
if my cursor was inside a password field single modifier activation
would not work.  This is apparently a restriction of the operating
system, that doesn't allow Quicksilver (or other programs like it) to
listen to text entry on secure fields.</p>

<p>I also noticed that when I was in Terminal.app single modifier
activation would not work, which was strange because it had worked in
the past (on 10.5 for example).  As a stopgap measure I started using command+space, which seemed to work all the time.</p>

<p>Using that new keybinding was annoying enough that I switched my
terminal and started using iTerm2.app.  It did not have the same
problem as Terminal.app oddly enough.  I finally figured out what
Terminal.app's problem was.</p>

<p><img src="http://rawsyntax.com/images/secure-keyboard-entry.png" class ="center"/></p>

<p>This setting essentially makes all text input in Terminal.app act like
a password field having the same single modifier activation problem as
above.  Turning Secure Keyboard Entry off fixed the problem.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Measuring Slow Code]]></title>
<link href="http://rawsyntax.com/blog/measuring-slow-code/"/>
<updated>2012-09-02T15:59:00-04:00</updated>
<id>http://rawsyntax.com/blog/measuring-slow-code</id>
<category term="programming" /><category term="tools" />

      <content type="html"><![CDATA[<p>Over the years I've found myself needing a quick way to measure some
slow code.  Whether I'm looking at a 100 line function or a 10 line
controller action, sometimes I just need some quick print statements
to determine which part of the code is slow.</p>

<!--more-->


<p>My original approach to doing this would be to mark off sections of
the code with <code>Time.now</code> statements printing out how many seconds each
section took.  This approach is messy because it requires altering the
code a good deal.  And at the end I was left comparing sections of the
code to figure out which part was slower than all the other parts --
doing the math in my head.</p>

<h2>Use Benchmark?</h2>

<p>Ruby has a
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a>
class built in.  I tried using it.  While it can be helpful in certain
situations, if I'm measuring 5 sections of a function there's an awful
lot of code rewriting that has to happen because of the Benchmark
blocks messing with the scope of variables.  That was more work than
it was worth.</p>

<h2>Roll my Own</h2>

<p>I'm hesitant to reinvent the wheel, but in this case I created a very
simple gem to address my needs.  It's called
<a href="https://github.com/rawsyntax/code_timer">CodeTimer</a>.  To use it first
you instantiate it:</p>

<p><figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  ruby'><pre><div class='line'><span class="n">ct</span> <span class="o">=</span> <span class="no">CodeTimer</span><span class="o">.</span><span class="n">new</span>
</div></pre></td></tr></table></div></figure></p>

<p>Then you insert markers for each part that you want to measure:</p>

<p><figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div></pre></td><td class='main  ruby'><pre><div class='line'><span class="n">ct</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="s2">&quot;Part1&quot;</span><span class="p">)</span>
</div><div class='line'><span class="c1"># ... slow code here ...</span>
</div><div class='line'><span class="n">ct</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="s2">&quot;Part2&quot;</span><span class="p">)</span>
</div><div class='line'><span class="c1"># ...</span>
</div></pre></td></tr></table></div></figure></p>

<p>And a marker for stopping measuring:</p>

<p><figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  ruby'><pre><div class='line'><span class="n">ct</span><span class="o">.</span><span class="n">end</span>
</div></pre></td></tr></table></div></figure></p>

<p>It returns a formatted string:</p>

<pre><code>Total Time: 17s
Part1:   11% / 2s
Part2:   29% / 5s
Part3:   47% / 8s
Part4:   11% / 2s
</code></pre>

<p>And it's easy to see that Part3 is the slowest section.  Better start
trying to speed up the code there.</p>

<h2>What If This Doesn't Work?</h2>

<p>This isn't the solution for every slow code problem.  If this approach
doesn't yield meaningful results you will have to use a more serious
tool.  However, I reach for this tool first because it's the simplest
thing that could possibly work.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Faster SSH Connections]]></title>
<link href="http://rawsyntax.com/blog/faster-ssh-connections/"/>
<updated>2012-07-11T12:34:00-04:00</updated>
<id>http://rawsyntax.com/blog/faster-ssh-connections</id>
<category term="tools" />

      <content type="html"><![CDATA[<p>Certain servers I connect to on a regular basis are rather slow when
connecting.  Here are some <code>~/.ssh/config</code> options to speed up ssh connections.</p>

<!--more-->


<p>I find this is useful for scripts that make multiple subsequent ssh
connections.  Capistrano comes to mind as well as a couple of scripts
I have that use scp.</p>

<div><script src='https://gist.github.com/rawsyntax/3091626.js'></script>
<noscript><pre><code>Host *
    # don't try to authenticate with Kerberos
    GSSAPIAuthentication no
    GSSAPIKeyExchange no
    # persist the ssh connection for 5 minutes
    # subsequent ssh connections respond faster because its reusing an existing connection
    ControlMaster auto
    ControlPath ~/.ssh/master-%r@%h:%p
    ControlPersist 5m</code></pre></noscript></div>


<h2>Beware Strange Behavior</h2>

<p>I have noticed occasionally that I get some error messages due
to stale master connections.  I think this happens when my computer
powers off without shutting down fully.</p>

<pre><code>Control socket connect(/Users/eric/.ssh/master-user@example.com:22): Connection refused
ControlSocket /Users/eric/.ssh/master-user@example.com:22 already exists, disabling multiplexing
</code></pre>

<p>The connection still works, but it is even slower to connect which
defeats the purpose of using master control sockets.  You can go into
<code>~/.ssh</code> and manually remove the connection files to clean it up.</p>

<p>Furthermore, this behavior can get quite confusing when setting up
ssh-key authentication.  You may think you have it set up correctly
because of lack of a password prompt, but in my case it was reusing
the connection (which is why it didn't prompt me).</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Who Changed my File]]></title>
<link href="http://rawsyntax.com/blog/who-changed-my-file/"/>
<updated>2012-07-02T18:27:00-04:00</updated>
<id>http://rawsyntax.com/blog/who-changed-my-file</id>
<category term="programming" />

      <content type="html"><![CDATA[<p>I was troubleshooting slow page loads on a server running rails
recently.  I noticed that DNS was actually causing an occasional
problem with pageloads.  For whatever reason my <code>/etc/resolv.conf</code>
would get overwritten every once in a while with slow / unresponsive
DNS servers.  I had manually set them to <code>8.8.8.8</code> and <code>8.8.4.4</code>, but
to my suprise the file had been changed.</p>

<!--more-->


<p>I started digging and checking the usual suspects that might alter
that file (<code>dhclient</code>, <code>resolvconf</code> ...).  I didn't find the problem.
This is where <code>auditd</code> comes in handy.  Its a daemon that can be setup
to watch a file and log what program changed it.</p>

<p>I installed <code>auditd</code> and set it up to watch <code>/etc/resolv.conf</code> and log
any write or append actions (as I don't care about who reads it):</p>

<p><code>auditctl -w /etc/resolv.conf -p wa -k resolvconf</code></p>

<p><code>-k</code> here is simply the key by which you can search the audit logs.  I edited the file a few times to test auditd and searched its logs:</p>

<p><code>ausearch -f /etc/resolv.conf</code></p>

<p>It logs all kinds of info.  user id, command run, working directory.
I'm blogging it here mostly so don't forget about it.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Emacs 24.1 is Out]]></title>
<link href="http://rawsyntax.com/blog/emacs-24-dot-1-is-out/"/>
<updated>2012-06-11T16:55:00-04:00</updated>
<id>http://rawsyntax.com/blog/emacs-24-dot-1-is-out</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>Emacs 24.1 was
<a href="http://lists.gnu.org/archive/html/emacs-devel/2012-06/msg00164.html">released</a>
yesterday.</p>

<p>Being the first release version of Emacs 24, I'd suggest trying it
out.  I've been using Emacs 24 since the pretest version started
coming out, and even the recent pretests have been stable for me.</p>

<!--more-->


<h2>Some New Features</h2>

<p>My favorite feature of Emacs 24 is the elisp package manager.  I find
its an extremely convenient way to manage the packages you want your
<code>~/.emacs.d</code> to utilize. It's available via <code>M-x list-packages</code>.  The
canonical package manager is known as the
<a href="http://tromey.com/elpa/">ELPA</a>, but there are other package
managers, such as <a href="http://marmalade-repo.org/">marmalade</a> because the
ELPA doesn't include everything.</p>

<p>Getting the package manager setup is easy.  Here's the minimal code
needed:</p>

<div><script src='https://gist.github.com/rawsyntax/2912673.js'></script>
<noscript><pre><code>(require 'package)

;; optionally add the marmalade repo to list-packages
(add-to-list 'package-archives
         '(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))

(package-initialize)
(package-refresh-contents)</code></pre></noscript></div>


<p>Another new feature is the built-in color-theme facility.  Prior to
Emacs 24 color themes could be created through the
<a href="http://www.emacswiki.org/cgi-bin/wiki?ColorTheme">color-theme</a>
package.  Instead you can now use <code>customize-create-theme</code> to create
color-themes.</p>

<p><img src="http://rawsyntax.com/images/customize-create-theme.jpg" class ="center"/></p>

<p>There's too much to cover in a blogpost, but here's the entire
<a href="https://www.gnu.org/software/emacs/NEWS.24.1">NEWS file</a>, which you
can also view inside emacs with  <code>M-x view-emacs-news</code>.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Smex]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-smex/"/>
<updated>2012-06-06T12:24:00-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-smex</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>Scroll down for code snippets and text.</p>

<div class="embed video YouTube"><iframe width="459" height="344" src="http://www.youtube.com/embed/18u_ieDpr1o?feature=oembed" frameborder="0" allowfullscreen></iframe></div>


<p>Smex is IDO style completion for M-x.  It is very customizable.  I
recommend taking a look at the README for all the available options.
Here's the minimum setup required.</p>

<div><script src='https://gist.github.com/rawsyntax/2883010.js'></script>
<noscript><pre><code>(require 'smex)
(smex-initialize)

(global-set-key (kbd &quot;M-x&quot;) 'smex)
(global-set-key (kbd &quot;M-X&quot;) 'smex-major-mode-commands)
(global-set-key (kbd &quot;C-c M-x&quot;) 'smex-update)
(global-set-key (kbd &quot;C-c C-c M-x&quot;) 'execute-extended-command)</code></pre></noscript></div>


<p>It's available on the ELPA and the source is on github.</p>

<p><a href="https://github.com/nonsequitur/smex/">Smex source on github</a><br />
<a href="http://marmalade-repo.org/packages/smex">available on marmalade repo</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Editing Javascript]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-editing-javascript/"/>
<updated>2012-05-31T17:07:00-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-editing-javascript</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>One of my favorite things about emacs is its javascript modes.  While
there are a million options, I'm only going to talk about how I edit
javascript with emacs.</p>

<!--more-->


<h2>Which Mode do I Use?</h2>

<p>I use <a href="http://code.google.com/p/js2-mode/">js2-mode</a>.  It provides
syntax highlighting and underlines errors as you type.  This mode
doesn't come with emacs, it was built by Steve Yegge.  However it is
installable through the ELPA.</p>

<p>One problem I found with this mode is that it has some weird ideas
about indentation.  I personally prefer the indentation from the
built-in <code>js-mode</code> in emacs.  After some googling I came across a
<a href="http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode">blogpost</a>
on fixing indentation in <code>js2-mode</code>.  Starting with that I then made my
own modifications and have a <code>js2-mode</code> that works exactly the way I
want it (code below).</p>

<div><script src='https://gist.github.com/rawsyntax/2846385.js'></script>
<noscript><pre><code>(add-to-list 'auto-mode-alist '(&quot;\\.js$&quot; . js2-mode))
(add-to-list 'auto-mode-alist '(&quot;\\.json$&quot; . js2-mode))


;; Use js-mode indentation in js2-mode, I don't like js2-mode's indentation
;;
;; thanks http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
;; with my own modifications
;;
(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (js--proper-indentation parse-status))
           node)

      (save-excursion

        (back-to-indentation)
        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = &quot;bar&quot;,
        ;;     bar = &quot;foo&quot;;
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation ( 4 indentation))))

      (indent-line-to indentation)
      (when (&gt; offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (&lt; (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the &quot;buffer
          ;; modified&quot; property for nothing
          (beginning-of-line)
          (unless (looking-at &quot;\\s-*$&quot;)
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'js)
  (setq js-indent-level 2
        indent-tabs-mode nil
        c-basic-offset 2)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map [(meta control \;)] 
    '(lambda()
       (interactive)
       (insert &quot;/* -----[ &quot;)
       (save-excursion
         (insert &quot; ]----- */&quot;))
       ))
  (define-key js2-mode-map [(return)] 'newline-and-indent)
  (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map [(control meta q)] 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
    (js2-highlight-vars-mode))
  (message &quot;My JS2 hook&quot;))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

</code></pre></noscript></div>


<h2>Editing Javascript in HTML</h2>

<p>In my experience I'm not always editing pure <code>.js</code> files.  Sometimes
I'm editing javascript inside a <code>.haml</code>, <code>.erb</code>, or <code>.html</code> file.  The
<code>haml-mode</code> I am using is supposed to have easy <code>js-mode</code> integration.
However I tried to integrate <code>js2-mode</code>, and it was not simple.
Furthermore, the built-in javascript highlighting seems to break on a
regular basis.  Troubleshooting that problem looked like it was going
to take more time than I had. Instead I wrote some elisp to allow me
to quickly create a javascript scratch buffer.</p>

<h2>Javascript Scratch Buffer</h2>

<p>I use this to write javascript and copy / paste between buffers until
I'm happy with the code.  It's a very simple solution to the problem.
It creates a buffer named scratch-js with <code>js2-mode</code>.  It's not unlike
the elisp scratch buffer that comes up on emacs start up.  I don't
write javascript all the time, so this solution works pretty well for me.</p>

<div><script src='https://gist.github.com/rawsyntax/2846414.js'></script>
<noscript><pre><code>(defun scratch-js ()
  &quot;Create or switch to a javascript mode scratch buffer&quot;
  (interactive)

  (if (not (eq nil (get-buffer &quot;scratch-js&quot;)))
      (switch-to-buffer &quot;scratch-js&quot;)
    (set-buffer (get-buffer-create &quot;scratch-js&quot;))
    (js2-mode)
    (switch-to-buffer &quot;scratch-js&quot;)))</code></pre></noscript></div>


<p>This is admittedly a stopgap solution.  I would prefer to have
<code>js2-mode</code> integrated tightly with <code>haml-mode</code>.  If anyone else has
actually done this, I would love to see the code.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Reload your app with Guard and Pow]]></title>
<link href="http://rawsyntax.com/blog/reload-your-app-with-guard-and-pow/"/>
<updated>2012-02-22T15:06:00-05:00</updated>
<id>http://rawsyntax.com/blog/reload-your-app-with-guard-and-pow</id>
<category term="programming" /><category term="ruby" />

      <content type="html"><![CDATA[<p>About 6 months ago I started using <a href="http://pow.cx/">Pow</a> for serving
my apps in development mode.  It loads any RACK compatible app, and
allows you to access your projects via the <code>.dev</code> and named symlinks
stored in <code>~/.pow</code> (for example <code>http://my_project.dev</code>).  No need to
specify a port either!</p>

<!--more-->


<p>Very shortly afterwards I ran into a problem.  When I'm working on a
Sinatra app, normally I use the
<a href="https://github.com/rtomayko/shotgun">shotgun</a> gem for automatic
reloading. I can't do that when I'm running Pow.  So I dug into Pow's
documentation.</p>

<p>Pow supports passenger-style reloads via these commands:</p>

<pre><code>touch tmp/restart.txt
touch tmp/always_restart.txt
</code></pre>

<p>That's somewhat helpful.  However, remembering to run <code>touch tmp/restart.txt</code> every time I make a change is a pain.  Creating <code>tmp/always_restart.txt</code> reloads every time, but makes the app painfully slow.  I don't need a reload for every css / image / js asset that is fetched.</p>

<p><a href="https://github.com/guard/guard">Guard</a> to the rescue!  Guard is a
simple tool.  Watch files; run commands on change.  There is already a
<a href="https://github.com/guard/guard-pow">guard-pow</a> gem.  Which touches
<code>tmp/restart.txt</code> on file change.</p>

<p>To use it, add <code>guard-pow</code> to your Gemfile.  Then define a Guardfile
telling it which files to watch.  Your specific files may differ, but
this works for my needs.</p>

<div><script src='https://gist.github.com/rawsyntax/1886987.js'></script>
<noscript><pre><code>guard 'pow' do
  watch('.rvmrc')
  watch('Gemfile')
  watch('Gemfile.lock')
  watch(%r{^lib/*/.*\.rb$})
  watch(%r{^app/*/.*\.rb$})
end
</code></pre></noscript></div>


<p>Finally, run <code>bundle exec guard</code>.  It will print when it restarts pow.
I like this approach because it can be adapted to any RACK compatible
app by changing which files get watched.  Also, it doesn't require you
to change any application specific code; It's only necessary to add
guard to the Gemfile.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: How to Break Bad Habits]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-how-to-break-bad-habits/"/>
<updated>2012-02-14T10:10:00-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-how-to-break-bad-habits</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/arrow-keys.jpg" class ="center"/></p>

<p>The best thing to do is never to form bad habits in the first place.
However if you didn't have any bad habits, you wouldn't be reading
this blog post.  Here's what has worked for me.</p>

<!--more-->


<h3>Make a Note of It</h3>

<p>One of my bad habits was using the arrow keys for navigation in emacs.
It's inefficient.  Emacs already has keybindings for next / previous
and back / forward -- and I don't have to pick up my hands for those.
The first thing I did was start keeping a short list of bad emacs
habits.</p>

<p>Don't think about fixing every bad habit immediately.  Just note them
and move on with real work.  These also don't have to be bad habits
per say.  They can be inefficiencies as well.  Is there a better way to
do that thing you do all the time, but you've been putting off putting
in the time to build it?</p>

<h3>Fix One Bad Habit</h3>

<p>After years of using the arrow keys in emacs, I decided it was time
for that to stop.  Because my emacs config is versioned.  I can see
that I decided to stop on <code>Fri Sep 16 10:53:49 2011 -0400</code>.  Work on
fixing this one habit until its completely fixed.  My fix was pretty
simple.</p>

<div><script src='https://gist.github.com/rawsyntax/1794878.js'></script>
<noscript><pre><code>commit 11dce2502c111ff9ae73f95dde89f27d0f84416a
Author: Eric Himmelreich &lt;eric@rawsyntax.com&gt;
Date:   Fri Sep 16 10:53:49 2011 -0400

    break arrow keys habit, I already know the emacs bindings for moving

    Modified   eric/bindings.el
diff --git a/eric/bindings.el b/eric/bindings.el
index 9915c7e..bb9d4fc 100644
--- a/eric/bindings.el
+++ b/eric/bindings.el
@@ -8,3 +8,9 @@
 
 (global-set-key (kbd &quot;C-w&quot;) 'backward-kill-word)
 (global-set-key (kbd &quot;C-x C-k&quot;) 'kill-region)
+
+;; stop using the arrow keys
+(global-unset-key [left])
+(global-unset-key [up])
+(global-unset-key [right])
+(global-unset-key [down])

[back] 
</code></pre></noscript></div>


<p>Unbind the arrow keys and it becomes pretty tough to use them.  I
don't use the arrow keys any more.  Maybe your fix is more complicated.
Maybe it's writing an emacs macro for something you do frequently.</p>

<h3>Schedule Time for This</h3>

<p>Its a bad idea to try to fix emacs problems while on a tight deadline
for a project.  However you will find yourself with a spare 30 minutes
or an hour here and there.  Make that your emacs improvement time.</p>

<p>Almost a year ago I found myself with an ever growing emacs problem.
My config files had grown out of control.  They were a huge mess and
impossible to manage.  Even though I was using version control my
config still had lots of local changes and files that weren't tracked
at all.  And my github repo was never up to date. I was in need of a
fresh emacs config.  I needed organization and simplicity.</p>

<p>When would I ever have time to rewrite my entire emacs config?</p>

<p>I started making time on <code>Tue Jun 21 18:18:41 2011 -0400</code> as I had read
about <code>emacs-starter-kit (v2)</code>.  Its basis was emacs-24 paired with
the marmalade-repo (for emacs-lisp packages).  I put in an n hour here
and there over the course of a few months.  In mid September it was good
enough to use as my full-time working config.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Swap Windows]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-swap-windows/"/>
<updated>2012-01-26T10:33:00-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-swap-windows</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>When I use Emacs in GUI mode, I set it up to have two 80 column
windows side by side.  It's extremely convention when you need to look
at one section of the code while writing another.  For instance, you
can have the spec file side by side with the code when doing TDD.
Sometimes I want to swap the windows.  This kind of functionality does
not come built in with emacs.  I found the <code>swap-windows</code> function
that I use in Steve Yegge's
<a href="https://sites.google.com/site/steveyegge2/my-dot-emacs-file">.emacs</a>
file.</p>

<div><script src='https://gist.github.com/rawsyntax/1683375.js'></script>
<noscript><pre><code>(defun swap-windows ()
 &quot;If you have 2 windows, it swaps them.&quot;
 (interactive)
 (cond ((not (= (count-windows) 2))
        (message &quot;You need exactly 2 windows to do this.&quot;))
       (t
        (let* ((w1 (first (window-list)))
               (w2 (second (window-list)))
               (b1 (window-buffer w1))
               (b2 (window-buffer w2))
               (s1 (window-start w1))
               (s2 (window-start w2)))
          (set-window-buffer w1 b2)
          (set-window-buffer w2 b1)
          (set-window-start w1 s2)
          (set-window-start w2 s1)))))</code></pre></noscript></div>



]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Troubleshooting your Emacs Config]]></title>
<link href="http://rawsyntax.com/blog/troubleshooting-your-emacs-config/"/>
<updated>2012-01-22T22:26:00-05:00</updated>
<id>http://rawsyntax.com/blog/troubleshooting-your-emacs-config</id>
<category term="learn-emacs" /><category term="programming" />

      <content type="html"><![CDATA[<p>Up to this point my <a href="http://rawsyntax.com/blog/categories/learn-emacs">Learn Emacs</a>
series has been all about how to do cool stuff in emacs.  One of my
personal favorites is <a href="http://rawsyntax.com/blog/learn-emacs-align-regexp/">align-regexp</a>.
A while back that stopped working for me.  Now I get an error: <code>Wrong type
argument: markerp, 0</code>.  Emacs doesn't always do what I mean.</p>

<!--more-->


<h3>First Remove your Config</h3>

<p>Whether you use a single <code>.emacs</code> file or a <code>~/.emacs.d/</code> directory
it is time to remove it.  Personally I keep <code>~/.emacs.d/</code> symlinked to
my <a href="https://github.com/rawsyntax/emacs.d">emacs.d github repo</a> so it iss
quite easy to remove the symlink.  Alternatively you can start emacs
with the <code>--no-init-file</code> option, to skip loading your files. The
rationale for removing your config is simply that it reduces the
number of variables you are dealing with.  Is the problem with your
config or with emacs itself?</p>

<h3>Then Check your Emacs Version</h3>

<p>After I removed my config and tried <code>M-x align-regexp</code> again, I got
the same error.  So its not my config.  If you find you have a problem
with a particular version of emacs <code>M-x emacs-version</code> will tell you
what version you have.  In my case it was</p>

<pre><code>GNU Emacs 24.0.92.1 (x86_64-apple-darwin, NS apple-appkit-1038.36) of 2011-12-02 on bob.porkrind.org
</code></pre>

<p>As I get my emacs builds from
<a href="http://emacsformacosx.com/">EmacsForMacOSX</a> or <code>brew install</code> them
myself.  At this point I'm fairly certain I'm getting the error as a
result of running a nightly build.  A quick google leads me to
<a href="http://lists.gnu.org/archive/html/bug-gnu-emacs/2011-12/msg00266.html">bug#10249: 24.0.92</a>.
I installed a pretest version, and align-regexp works fine like it
used to..  I would prefer to be running the stable version, but I'm using
<a href="https://github.com/technomancy/emacs-starter-kit">emacs-starter-kit</a>
for my config, which requires emacs 24.</p>

<h3>Version your Config</h3>

<p>When functionality like this breaks it is really awesome to have an
emacs configuration that is under version control.  I can walk
backwards through any recent changes to find what is causing breakage.
So if your config isn't already versioned, version it right now.</p>

<p>PS: I'm interested to know any emacs topics you'd like to see a
blogpost on.  I haven't been hacking my emacs config much lately, so
I'm short on ideas for emacs posts.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Stop Programming]]></title>
<link href="http://rawsyntax.com/blog/stop-programming/"/>
<updated>2012-01-04T15:25:00-05:00</updated>
<id>http://rawsyntax.com/blog/stop-programming</id>
<category term="rants" />

      <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/stop-programming.jpg" alt="Stop Programming" class="center"/></p>

<p>I've got some ideas on how you can improve your programming by not
programming.  Try something new this year.</p>

<!--more-->


<h3>Simplifying Too Much</h3>

<p>About 4 years ago, I fell in love with minimalism and tried to get rid of most of my possessions.  I went as far as selling my saxophone, (3) bass guitars,  and bass rig.  This meant not playing music any more.  At the time I decided that playing music was nonessential since it did not relate to programming and didn't make any money.  I also sold my bicycle (which meant no more cycling).</p>

<p>Pretty soon after that I was just a guy who programmed at work and
worked on programming projects at home.  In other words, not very interesting.</p>

<p>The great secret of minimalism (taken to an extreme), is that if you
take away everything you are left with nothing.  In my case I realized
I didn't do anything for fun anymore.  I've since bought a bass,
bass rig, and bicycle and started teaching myself classical / flamenco guitar.</p>

<h3>Be a Beginner Again</h3>

<p>I think there's a problem lurking in many programming communities
(forums, IRC, mailing lists).  Every so often a beginner comes a long
and asks a basic question in the wrong way.  He doesn't follow the
rules of the community.  So a long-standing member of the community
replies "use the search", "read the FAQ",  or a similar useless
answer.  Go and search any forum you will find useless results like
this.  This is not only unfriendly, but can pollute search results for
others that visit later with the same questions, which eventually
renders the "use the search" solution useless.</p>

<p>While I agree that a community's rules of etiquette should be
followed, I think some members of these online communities have
forgotten what it's like to be a beginner.  Often newbie may not
know what to search or need some extra explanation regarding a common
problem. I found this to be the case when starting out with <a href="http://rawsyntax.com/blog/categories/learn-emacs/">emacs</a>,
wherein reading the manual and using the help system are actually part
of emacs itself and can be confusing if you don't even know how to use
the thing.</p>

<p>That's why I recommend trying something other than programming.  Go
for something unrelated.  Something where you will be a complete
beginner.  Try learning a musical instrument, building a bike,
woodworking, etc...  Next time you're helping out a beginner you may
find yourself being more helpful and patient.</p>

<h3>Expand Your Mind</h3>

<p>The other reason to try something new is that it may eventually lead
you to approach programming problems in a different or unconvential
way.  Much of what we do is done by way of analogy.  OOP works by
making a model that approximates real situations.  Eventually you'll
run into a real programming problem that can be solved using methods
from the real world.</p>

<p>Furthermore, programming is creative work.  It can be helpful to look
elsewhere for inspiration.  Often I find myself thinking of
programming as an art, as self-expression (albeit with many real world
constraints; self-expression won't necessarily create useful
programs).  To get a better idea of what I mean check out <a
href="http://www.amazon.com/gp/product/0931137071/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0931137071">The Tao of Programming</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=0931137071" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />.  Though it is written in a somewhat joking
manner, there is truth in it.</p>

<p>My favorite section is <strong>2.4</strong>:</p>

<blockquote><p>A novice asked the Master: ``Here is a programmer that never designs, documents or tests his programs. Yet all who know him consider him one of the best programmers in the world. Why is this?''</p><p>The Master replies: ``That programmer has mastered the Tao. He has<br/>gone beyond the need for design; he does not become angry when the<br/>system crashes, but accepts the universe without concern. He has gone<br/>beyond the need for documentation; he no longer cares if anyone else<br/>sees his code. He has gone beyond the need for testing; each of his<br/>programs are perfect within themselves, serene and elegant, their<br/>purpose self-evident. Truly, he has entered the mystery of Tao.''</p><footer><strong>The Tao of Programming</strong> <cite><a href='http://www.amazon.com/gp/product/0931137071/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0931137071'>www.amazon.com/gp/product/&hellip;</a></cite></footer></blockquote>


<p>Though this style of programming is totally impractical for designing
reliable extensible software, I ponder it every few months because
it is such a different perspective.  What if you were able to write a
program that had the intuitive cohesion of a poem?</p>

<h3>Now Go Do Something Else</h3>

<p>That's it.  Try something different and new this year.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Building a Gaming PC]]></title>
<link href="http://rawsyntax.com/blog/building-a-gaming-pc/"/>
<updated>2011-12-21T10:34:00-05:00</updated>
<id>http://rawsyntax.com/blog/building-a-gaming-pc</id>
<category term="gaming" />

      <content type="html"><![CDATA[<p>I recently built a gaming pc from parts, as my laptop was struggling
to run the latest games even on very low settings.  I did some
googling and came to the obvious conclusion that building a desktop
for gaming is way cheaper than trying to buy a new laptop, and the
desktop gets way better performance.  In fact, this makes it so that I
can stretch my laptop for a few more years, as it's only used for web
programming at the moment (and it's plenty fast due to its SSD).</p>

<!--more-->


<p>At the end of this article I'll be listing all the parts I used for my build.</p>

<h3>Before Building a PC</h3>

<p>You will need to take a few precautions.  I recommend using an
anti-static wrist-strap.  They are about $5 and save you from frying
your much more expensive components due to static electricity.  Wear
it like a watch and clamp it to an unpainted metal part of your
computer case.  I used the
<a href="http://www.amazon.com/gp/product/B00004Z5D1?ie=UTF8&amp;tag=rawsyntax-20&amp;linkCode=xm2&amp;camp=1789&amp;creativeASIN=B00004Z5D1">Belkin Anti-Static Wrist Band</a>
for my PC build.</p>

<p>Get some diagnostic software.  I recommend the
<a href="http://www.ultimatebootcd.com/">Ultimate Boot CD</a>.  This will come in
handy if you have problems getting your system to boot or problems
with it crashing.  It has diagnostic tools for CPU, memory, hard
drive, etc...  I used it when
<a href="http://rawsyntax.com/blog/verify-your-assumptions/">troubleshooting my build</a> and I found
that it was just a bad memory stick causing all my issues.</p>

<h3>Plan your build</h3>

<p>Next you'll want to spec out exactly what parts you'll be using and
ensure they are all compatible with each other.  A good site for
finding parts and getting the best price is
<a href="http://pcpartpicker.com/">PCPartPicker</a>.  If you need help deciding
on a PC build that fits your budget, head on over to
<a href="http://www.reddit.com/r/buildapc">BuildAPC</a>.  I had them recommend me
a gaming PC build for my budget.  They can also help you with advice
on how to actually put the parts together.</p>

<h3>Actually Building a PC</h3>

<p>I recommend that you build the PC with a TDD mentality.  Put in only the parts
necessary to get it to POST successfully.  From then on, I would add
individual components and test them with your UltimateBootCD.  Only
after all the hardware passes tests should you install an operating
system and drivers.</p>

<p>I am recommending this approach after having done it the wrong way
myself.  I put everything in and the operating system before doing any
testing, and I was having random crashes going on.  It took hours of
troubleshooting: read more about
<a href="http://rawsyntax.com/blog/verify-your-assumptions/">troubleshooting my build</a>.</p>

<h3>What Parts Did I Use?</h3>

<p><a href="http://www.amazon.com/gp/product/B002C9K3UO/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B002C9K3UO"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B002C9K3UO&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B002C9K3UO" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B002C9K3UO/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B002C9K3UO">LG Electronics GH22NS50 22X SATA Super Multi DVD+/-RW Internal Drive</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B002C9K3UO" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>So far I've only used it for running the UltimateBootCD.</p>

<p><a href="http://www.amazon.com/gp/product/B000H6AY6M/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000H6AY6M"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B000H6AY6M&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B000H6AY6M" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B000H6AY6M/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B000H6AY6M">Saitek Eclipse II Backlit Keyboard (PK02AU)</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B000H6AY6M" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>I like this keyboard because it lights up: red, blue, or purple.</p>

<p><a href="http://www.amazon.com/gp/product/B004CRSM4I/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B004CRSM4I"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B004CRSM4I&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B004CRSM4I" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B004CRSM4I/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B004CRSM4I">Corsair Vengeance 8 GB (2 x 4 GB) DDR3 1600 MHz (PC3 12800) 240-Pin DDR3</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B004CRSM4I" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>I bought this ram after I had to return some G Skill ram that was bad.</p>

<p><a href="http://www.amazon.com/gp/product/B004EBUXHQ/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B004EBUXHQ"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B004EBUXHQ&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B004EBUXHQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B004EBUXHQ/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B004EBUXHQ">Intel Core i5-2500K Processor</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B004EBUXHQ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>The important part here is that it's the 2500k edition, which will
allow overclocking if you're into that.</p>

<p><a href="http://www.amazon.com/gp/product/B004B1BAQ2/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B004B1BAQ2"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B004B1BAQ2&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B004B1BAQ2" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B004B1BAQ2/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B004B1BAQ2">Antec Computer Power Supply HCG-620</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B004B1BAQ2" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Be sure your power supply has enough watts for your pc build (and
supports crossfire or SLI for your graphics card).</p>

<p><a href="http://www.amazon.com/gp/product/B0055Y66A4/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B0055Y66A4"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B0055Y66A4&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B0055Y66A4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B0055Y66A4/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B0055Y66A4">Sapphire DIRT 3 EDITION Radeon HD 6950 2 GB DDR5</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B0055Y66A4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>This graphics card was said to be unlockable to a 6970, but my
particular card was not.  However, it's still a very powerful card.</p>

<p><a href="http://www.newegg.com/Product/Product.aspx?Item=N82E16813157271">ASRock Z68 Gen3 Extreme3</a></p>

<p>This motherboard has some overclocking options built in.</p>

<p><a href="http://www.amazon.com/gp/product/B0026FCI2U/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B0026FCI2U"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B0026FCI2U&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B0026FCI2U" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B0026FCI2U/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B0026FCI2U">Cooler Master HAF ATX Mid Tower Case</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B0026FCI2U" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>This case has great cooling, and is relatively quiet in my opinion.
If you need quieter, I would replace the hard drive fan with a quieter
one.  It's the loudest fan on this thing.</p>

<p><a href="http://www.amazon.com/gp/product/B005CT56R6/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B005CT56R6"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B005CT56R6&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B005CT56R6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B005CT56R6/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B005CT56R6">Seagate Barracuda 7200 500 GB SATA 6.0 Gb-s 16 MB Cache 3.5-Inch Internal Bare Drive ST500DM002</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B005CT56R6" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>With hard drive prices the way they are now I wanted to save some
money and 500GB is plenty of space for game files.  Some people
recommend a SSD for gaming boxes, and while the performance will
certainly be better, I haven't noticed load times being much longer
with this disk.  It's fast enough.</p>

<h3>Parts I Had Already</h3>

<p><a href="http://www.amazon.com/gp/product/B00302DNZ4/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B00302DNZ4"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B00302DNZ4&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B00302DNZ4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B00302DNZ4/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B00302DNZ4">Dell UltraSharp U2410 24-inch Widescreen LCD High Performance Monitor with HDMI, DVI, DisplayPort and HDCP</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B00302DNZ4" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>Though I already had this monitor at the time, as I use it for work,
I'm listing it here because I highly recommend it.  The picture is
great, it's height-adjustable, rotatable, and can be mounted on a wall or
monitor arm.  If the new price is too much for you, you can always
find a refurbished one for about $300.  Most importantly the
resolution is 1920x1200 not 1920x1080 like most monitors these days.</p>

<p><a href="http://www.amazon.com/gp/product/B003BIFI6E/ref=as_li_qf_sp_asin_il?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B003BIFI6E"><img border="0" src="http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&Format=_SL160_&ASIN=B003BIFI6E&MarketPlace=US&ID=AsinImage&WS=1&tag=rawsyntax-20&ServiceVersion=20070822" ></a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B003BIFI6E" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p><a href="http://www.amazon.com/gp/product/B003BIFI6E/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=B003BIFI6E">Razer DeathAdder - Gaming Mouse Left Hand Edition</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=B003BIFI6E" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>

<p>This is the best left handed gaming mouse I have found on the market
today.  It also has drivers for both Windows and OS X.  The only
annoying thing about it is that the manufacturer switched the left and
right click.  So out of the box left-click and right-click are
switched.  Luckily this can be adjusted with the drivers.  There are
surprisingly few options for left-handed gamers, and the symmetrical
mice don't do it for me.</p>

<h3>Build Results</h3>

<p>All said and done this build cost me $922.79.  It runs current games
on Ultra High settings, and has some room for overclocking or adding a
second video card.  It is also said to support Ivy Bridge CPUs (when
they come out).</p>

<p>Interestingly, building this way allows me to buy a cheaper laptop next time I replace it (I don't have to care about the graphics card in my laptop).  So overall it'll work out cheaper, and I end up with a much better gaming experience.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Sometimes Side Projects Fail]]></title>
<link href="http://rawsyntax.com/blog/sometimes-side-projects-fail/"/>
<updated>2011-12-09T11:44:56-05:00</updated>
<id>http://rawsyntax.com/blog/sometimes-side-projects-fail</id>
<category term="programming" /><category term="rants" />

      <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/side-projects-fail.jpg" alt="Sometimes Side Projects Fail" class="center"/></p>

<p>I've worked on a few side projects over the years.  Sometimes they've
turned out well, and other times I stopped working on them.  How do
you know when it's time to throw in the towel and when it's time to
push through?</p>

<!--more-->


<p>Roughly a year ago a friend and I were working on a bill splitting
system.  It was supposed to solve the problem of splitting bills
between friends.  More specifically, splitting regularly occuring or
one time expenses between roommates.  Rather than worrying about
having cash, or writing a check and waiting for it to cash, we built a
system which piggybacked off of paypal's API to send bill and payment
notifications via email, which would generate a web checkout page
where the debt could be paid online through paypal.</p>

<p>See how long the previous sentence is?  Sounds too complicated already
and I'm the one who built it. The eventual idea was that we would wrap
this in a native client wrapper, so that if you're out to dinner with
your friends you don't have to worry about splitting the bill.  One
person will pick up the entire bill, split it and send bill
notifications via email to all the other people.  Then the others pull
out their phones and enter their paypal accounts and send payment for
their portion of the bill.  The bill can be settled on the spot.</p>

<h3>Not Every Idea is a Hit</h3>

<p>In a perfect world every side-project would be a hit that turns into
a business that generates lots of profit for little work.  In practice
this actually can be quite difficult to pull off.  Furthermore
sometimes those big hits aren't actually big hits when they start.  It
make take a couple of years of work to pull.  But how do you know if
your idea is taking a couple of years to get started or simply not
good at all?  Nobody wants to be a quitter, and worse nobody wants to
quit a good idea that ends up making someone else rich.  But there's
also more to life than money.</p>

<p>After working on this idea for a few hours a week for a couple months
we eventually decided to scrap it.  There really didn't seem to be a simple
way to make money with this idea.  It may have been a useful service,
but there are already similar free services out there for this.  Over
the years, I've grown to have an affinity for ideas that have
monetization strategies that are simple to understand.  In my
experience, the more complicated it is, the less the likelyhood of
actually making money.</p>

<p>Most importantly I wasn't particularly passionate about the idea, and
I didn't like the idea of piggybacking off of Paypal because of their
horrible customer service (I recently had my funds availability
delayed for 3 weeks with no explanation, and I've had an account for 7
years and an ebay account with perfect feedback).  But using another
online payment system made the idea less useful because other peer to
peer payment systems simply aren't as ubiquitous.</p>

<h3>Benefits of Side Projects</h3>

<p>Often the benefits are not monetary in nature.  In the case of this
bill splitting website, I used it at the time to keep up to date with
rails 3 and refresh my skills a little bit.  I was using Merb for most
projects at work at the time. Furthermore, working on small side
projects now and then keeps you familiar with how to start a project
from scratch and increases the breadth of your knowledge.  If its a
small project with just one person working on it, you have to be the
one to do everything (or at least hire the contractors that will do
the part outside your expertise, which is a skill in itself).</p>

<p>The most important thing is to simplify your idea.  Then build the
simplest thing that could possibly work.  Then keep at it and don't be
afraid to re-evaluate your idea.  It doesn't make you a quitter to throw out a project that no longer seems reasonable.</p>

<p>Check out an older post of mine about <a href="http://rawsyntax.com/blog/importance-of-side-projects/">side projects</a>.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Verify your Assumptions]]></title>
<link href="http://rawsyntax.com/blog/verify-your-assumptions/"/>
<updated>2011-12-07T09:41:00-05:00</updated>
<id>http://rawsyntax.com/blog/verify-your-assumptions</id>


      <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/ram.jpg" class ="center"/></p>

<p>Always verify your assumptions.  It will save you time and headache.
I'll explain now.</p>

<!--more-->


<h3>Building a PC</h3>

<p>I recently built a PC from parts I bought online.  It had been 5 years
since I've built a PC at the time so I'd forgotten my good habits.  I
put everything together: RAM, CPU, HDD, GPU, motherboard etc...  and
it booted up and POST'ed no problems.  I thought I was good to go at
this point.  I managed to install windows and a bunch of drivers, but
then I started getting random freeze ups.</p>

<h3>Troubleshooting</h3>

<p>I thought perhaps it was one of the drivers or something specific to
windows 7 (this is a gaming box, not for work).  So I did a little
digging and actually ended up reinstalling windows bare to rule out
any driver issues.  Long story short, while the box would work fine
for about 10 minutes, shortly thereafter the box would freeze up.</p>

<p>It was at this point that I decided to get a boot CD with some
troubleshooting utilities.  I chose
<a href="http://www.ultimatebootcd.com/">Ultimate Boot CD</a> because it's free
and has almost everything you could need for diagnostics.</p>

<h3>Testing</h3>

<p>For whatever reason, when I built the PC I did it wrong.  I skipped
the testing phase.  I didn't test first.  So now I was in a situation
where I was digging through everything to get to the root of the
problem (and hopefully there's only one!).  First I tested the HDD
using HDAT2.  Many hours later, it came back clean.  Then I tested
using Memtest86.  Within a couple of minutes it detected an error.  So
I pulled the 2 RAM sticks, and tested each individually, and
determined that I had 1 bad stick of RAM.</p>

<h3>The Point is</h3>

<p>If I had built my system right: plug in as little as possible to get
it to boot and run diagnostics before installing software, I would
have found my problem much faster and saved hours of time.  My problem
here was that I assumed my RAM was good.  So even when you're not
programming it's important to verify your assumptions and don't forget to test.</p>
]]></content>
    </entry>
  
</feed>
