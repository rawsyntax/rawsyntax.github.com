<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Raw Syntax]]></title>
  <link href="http://rawsyntax.com/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2014-09-26T22:11:00-04:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
    <entry>
      




<title type="html"><![CDATA[How to Set Up Angular With Rails]]></title>
<link href="http://rawsyntax.com/blog/how-to-set-up-angular-with-rails/"/>
<updated>2014-09-26T22:06:48-04:00</updated>
<id>http://rawsyntax.com/blog/how-to-set-up-angular-with-rails</id>
<category term="programming" />

      <content type="html"><![CDATA[<p>I've written a post about using Angular with Rails on
<a href="http://www.intridea.com/blog/2014/9/25/how-to-set-up-angular-with-rails">Intridea's Blog</a>.
Please have a look.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Term, Ansi Term]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-term/"/>
<updated>2014-05-18T15:43:47-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-term</id>
<category term="code" /><category term="learn-emacs" /><category term="terminal" /><category term="tools" />

      <content type="html"><![CDATA[<p>When I first started using Multi-Term to run my
<a href="http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/">terminal in emacs</a>,
much of the documentation I saw on the
<a href="http://www.emacswiki.org/emacs/AnsiTerm">EmacsWiki</a> referenced both
<code>ansi-term</code> and <code>term</code>. This left me somewhat confused as to which I
should be using and what the difference was. I ignored this for some
time while I got my Multi-Term setup working correctly.</p>

<h2>Look It Up</h2>

<p>When the time came to find out the truth, I knew I could just ask
emacs.  I used <code>C-h a</code> to invoke <code>apropros</code> and fed it both
<code>ansi-term</code> and <code>term</code>.  The output linked me to <code>term.el</code> and I read
the source for both methods. It turns out that both methods work
similarly, but simply use different buffer names.  As
<a href="http://www.emacswiki.org/emacs/AnsiTerm">EmacsWiki</a> explains, the
difference is largely historical at this point. Previously, plain
<code>term-mode</code> was less able to display colors than <code>ansi-term</code>.</p>

<p>This is one of the features I like best about emacs. It has a built-in
help system that allowed me to search for term related documentation,
and eventually led me to the source code implementation of the method
in question. All without leaving the editor!</p>

<p>I have some enhancements to my previous post
<a href="http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/">zsh and multi-term in emacs</a>,
and the fixes and changes that I implemented all came from reading the
source of <code>term.el</code> and referring to <a href="http://emacswiki.org">EmacsWiki</a>
as needed.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Getting started with Raspberry Pi]]></title>
<link href="http://rawsyntax.com/blog/getting-started-with-raspberry-pi/"/>
<updated>2014-03-26T17:29:00-04:00</updated>
<id>http://rawsyntax.com/blog/getting-started-with-raspberry-pi</id>
<category term="raspberry-pi" />

      <content type="html"><![CDATA[<p>In this post I'm going to  go over each step to get your Raspberry Pi
ready for ruby development.  In setting up my RPi I've found that
there is a lot of outdated information on the web. I've created an up
to date list of steps here.</p>

<p>Note: Be ready to step away from the computer during the setup
process. The RPi is cool, but quite slow.</p>

<h2>Supplies</h2>

<p>At a minimum you will need (these are the parts I bought):</p>

<ul>
<li><a href="http://amzn.to/1mvnFFs">RPi Model B</a></li>
<li><a href="http://amzn.to/1ht8zJo">Class 10 SD Card</a></li>
<li><a href="http://amzn.to/NVdgDN">Ethernet cable</a></li>
<li><a href="http://amzn.to/NVe8Io">Power Supply</a></li>
<li><a href="http://amzn.to/1gD5mvr">Charging Cable</a></li>
</ul>


<p>Note about power supplies: There are cheaper ones, but you have to
weigh that risk against setting your home on fire. In particular, you
want to verify that the power supply is UL-certified.</p>

<p>This cost me about $67, but could be cheaper if you already have some
of these parts.</p>

<h2>Pick an OS</h2>

<p>The first step is to pick which distribution to run on your RPi.
Looking at the
<a href="http://elinux.org/RPi_Distributions#Comparison">comparison table</a> I
decided to go with <a href="http://www.raspbian.org/">Raspbian</a>.  This was
chiefly because I've used Debian and Ubuntu in the past. That being
said, there are many other distrubtions available for RPi.</p>

<p>The next step is to download the image
<a href="http://www.raspberrypi.org/downloads">here</a>.  I downloaded the
<code>2014-01-07-wheezy-raspbian.zip</code> version and unzipped it.</p>

<h2>Set up the SD Card</h2>

<p>You will need an SD card for storage on the RPi. I went with
<a href="http://amzn.to/1ht8zJo">Transcend 32 GB Class 10 SDHC</a>.  Class 10 is
the recommended speed for use with RPi. Any faster would be limited by
the RPi's bus.</p>

<p>Plug the SD card into your Mac and determine disk name by running
<code>diskutil list</code>.</p>

<p>The output will be similar to this:</p>

<pre><code>/dev/disk0
   #:                       TYPE NAME                    SIZE        IDENTIFIER
   0:      GUID_partition_scheme                        *500.3 GB   disk0
   1:                        EFI EFI                     209.7 MB   disk0s1
   2:                  Apple_HFS Macintosh HD            499.4 GB   disk0s2
   3:                 Apple_Boot Recovery HD             650.0 MB   disk0s3
/dev/disk2
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                        *998.6 GB   disk2
   1:                        EFI EFI                     209.7 MB   disk2s1
   2:                  Apple_HFS Time Machine Backups    998.2 GB   disk2s2
/dev/disk5
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *32.1 GB    disk5
   1:             Windows_FAT_32 boot                    58.7 MB    disk5s1
   2:                      Linux                         32.1 GB    disk5s2
</code></pre>

<p>You can determine which <code>/dev/disk</code> your RPi is by matching up the
Volume name with the value in the NAME column.  Here my RPi is
<code>/dev/disk5</code>, and the volume name is <code>boot</code>.</p>

<p>Next, unmount the volume with <code>sudo diskutil umount /Volumes/boot</code>.
If you don't unmount the SD card first, you will receive an error about the
device being busy when trying to image it.</p>

<p>Finally, copy the OS image to the SD card with <code>dd if=2014-01-07-wheezy-raspbian.img of=/dev/disk5 bs=1</code></p>

<p>Go have some non-computer time.  This took roughly an hour when I did it.</p>

<h2>Boot the OS on your RPi</h2>

<p>Once <code>dd</code> has completed:</p>

<ul>
<li>Remove the SD card from your Mac</li>
<li>Plug the SD card into the RPi</li>
<li>Plug your RPi into your network with an ethernet cable</li>
<li>Power the RPi on by plugging it in and wait a couple minutes for it
to boot</li>
<li>Look up the address via your router</li>
</ul>


<p><img class="" src="http://rawsyntax.com/images/raspi-network.png"></p>

<p>Here, my RPi is listed as <code>192.168.1.229</code></p>

<p>Login via ssh with default user (pi) and default password (raspberry)
<code>ssh pi@192.168.1.229</code></p>

<p>If you run <code>df -h</code> you will see that your install isn't using all of
the available storage on the SD card. You need to expand the SD card
by running:</p>

<p><code>sudo raspi-config</code> and selecting the expand option.</p>

<p><img class="" src="http://rawsyntax.com/images/raspi-config.png"></p>

<p>I also recommend selecting option 2 and changing the default password.</p>

<p>Out of the box my RPi was set to the <code>en_GB</code> locale. You can set the
correct locale and timezone by running:</p>

<pre><code>sudo dpkg-reconfigure locales
sudo dpkg-reconfigure tzdata
</code></pre>

<p>Next, make sure the latest packages are available before you get to
installing software:</p>

<p><code>sudo apt-get update</code></p>

<h2>Set your Shell (optional)</h2>

<p>Raspbian comes with bash as the default shell.  If that's fine for
you, skip this section.</p>

<p>Zsh can be installed by running:</p>

<pre><code>sudo apt-get install zsh
chsh
</code></pre>

<p>Then enter <code>/usr/bin/zsh</code> for the new shell.</p>

<h2>Set up Ruby</h2>

<p>I found the following dependency was missing out of the box:
<code>sudo apt-get install libssl-dev</code></p>

<p>Get rbenv with:</p>

<pre><code>git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
git clone https://github.com/sstephenson/rbenv-gem-rehash.git ~/.rbenv/plugins/rbenv-gem-rehash
</code></pre>

<p>Add the following to your <code>.bash_profile</code> or <code>.zshrc</code></p>

<p><code>eval "$(rbenv init -)"</code>
Reload your shell (or simply login again) and run:</p>

<pre><code>rbenv install 2.1.1
rbenv global 2.1.1
</code></pre>

<p>Or whatever version you prefer.  To confirm everything is set up run:</p>

<pre><code>ruby -v
ruby 2.1.1p76 (2014-02-24 revision 45161) [armv6l-linux-eabihf]
</code></pre>

<h2>Set up Node.js</h2>

<p>I set up node because some ruby gems require a javascript runtime.
Installing node looked easier than getting v8 to work on RPi. Simply run:</p>

<pre><code>wget http://node-arm.herokuapp.com/node_latest_armhf.deb
sudo dpkg -i node_latest_armhf.deb`
</code></pre>

<h2>On the Next RPi Post</h2>

<p>I've noticed some flakiness on my laptop's Internet
connection, but I'm unclear what the cause is -- is it Comcast or some
of the servers I hit actually being down from time to time?</p>

<p>In my next post, I'll go over how I set up my first RPi project. It
will run a basic dashboard displaying various network connectivity metrics.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Birthday Easter Egg]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-birthday-easter-egg/"/>
<updated>2014-02-11T20:51:24-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-birthday-easter-egg</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>Part of the charm of Emacs is its collection of <a href="http://en.wikipedia.org/wiki/Easter_egg_(media)">easter eggs</a>. It contains a tetris clone, Towers of Hanoi, Conway's game of life, and <a href="http://www.emacswiki.org/emacs/CategoryGames">others</a>.</p>

<p>One Easter egg I discovered by accident (through using <a href="http://rawsyntax.com/blog/learn-emacs-smex/">smex</a>) is:
<figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  plain'><pre><div class='line'>M-x animate-birthday-present</div></pre></td></tr></table></div></figure></p>

<p>Which takes an argument (the person's name) and displays an animation wishing that person happy birthday.  My favorite Easter egg is <code>gomoku</code>.  It is a fun 5-in-a-row game against the computer.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Keep your API Documentation Honest]]></title>
<link href="http://rawsyntax.com/blog/keep-your-api-documentation-honest/"/>
<updated>2014-01-13T14:41:41-05:00</updated>
<id>http://rawsyntax.com/blog/keep-your-api-documentation-honest</id>
<category term="documentation" />

      <content type="html"><![CDATA[<p>I've written a post about API documentation on <a href="http://www.intridea.com/blog/2014/1/22/keepin-your-api-honest">Intridea's blog</a>.  Please have a look.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: The Extensible Editor]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-the-extensible-editor/"/>
<updated>2013-11-17T10:34:23-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-the-extensible-editor</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>Emacs bills itself as being the extensible self-documenting editor.  When I first started using it I was suspicious that not many people take advantage of the extensible part.  I could not have been more wrong.  What follows is a short story of a hack to get Emacs to do what I want.</p>

<h2>Making Emacs Work for Me</h2>

<p>I use <a href="https://github.com/jhelwig/ack-and-a-half">ack-and-a-half</a> to interact with ack (instead of grep) via Emacs.  Some time ago I read about <a href="https://github.com/ggreer/the_silver_searcher">ag</a>, but there wasn't an Emacs mode for it available.  I checked again last week, and found that there is now <a href="https://github.com/Wilfred/ag.el">ag.el</a>.  After trying it, I found that it doesn't work exactly like ack-and-a-half.  I wanted to switch to ag, but did not want to give up ack-and-a-half's behavior.</p>

<p>So I did the emacs thing and had a look at ag.el's source to assess how much effort changing it would be. It was too much effort.  I then realized due to the close compatibility between ack and ag, I could probably quickly hack up ack-and-a-half to change the backend to ag.</p>

<p>After an hour of work <a href="https://github.com/rawsyntax/ag-and-a-half">ag-and-a-half</a> was born. The result is that my former ack-and-a-half frontend now runs 3x-5x faster (ag's performance promise).  The work that I did was largely a wholesale find and replace.  The right thing to do would be to make the backend swappable between ack and ag.  However, the quick hack works great for now.</p>

<p>I find this is a good example of Emacs' extensibility and an example actually taking advantage of it.  If you're using Emacs without customizing or extending it, you're missing out.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Zsh and Multi-Term]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term/"/>
<updated>2013-11-03T15:12:27-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-zsh-and-multi-term</id>
<category term="code" /><category term="learn-emacs" /><category term="terminal" /><category term="tools" />

      <content type="html"><![CDATA[<p>I've been experimenting with running <code>multi-term</code> in emacs instead of using an external program like iTerm2.  While <code>multi-term</code> is good, it can have some show-stopping  problems out of the box.  As usual, <a href="http://emacswiki.org">EmacsWiki</a> has some good tips, but there isn't a comprehensive setup all on one page.</p>

<p>View a short demo of this integration <a href="http://www.youtube.com/watch?v=G76ONy6YAPQ">on youtube</a>.</p>

<!--more-->


<h2>Why Multi-Term</h2>

<p>I found <code>eshell</code> to be lacking terminal functionality. It didn't work well for me when trying to use a pager or using screen / tmux.  I chose <code>multi-term</code> because it runs a real terminal and has convenience functions for running multiple terminals, which matches my old workflow in iTerm2.</p>

<h2>Setup Problems</h2>

<p>The first problem I noticed was that <code>multi-term</code> would not display certain colors.  Inspecting <code>$TERM</code> in <code>multi-term</code> revealed that it was set to <code>eterm-color</code>, but my system lacked terminfo for that terminal.  The following command resolves this problem:</p>

<p><code>tic -o ~/.terminfo /Applications/Emacs.app/Contents/Resources/etc/e/eterm-color.ti</code></p>

<p>If your <code>Emacs.app</code> doesn't contain that file, you can try searching your system emacs install for <code>eterm-color.ti</code>.  That file has been included in emacs for many years.</p>

<p>Secondly, it's important to verify which <code>sh</code> multi-term is running against.  I prefer zsh.</p>

<div><script src='https://gist.github.com/rawsyntax/7293750.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293750&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>I also noticed that my default zsh theme includes UTF-8 characters, which aren't displayed correctly by my emacs.  While I haven't found a fix for this, I have added a conditional to my <code>.zshrc</code> to use a more compatible theme inside emacs.</p>

<div><script src='https://gist.github.com/rawsyntax/7293807.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293807&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>Another annoyance is that the default history limit is quite low (only 2048 lines).  If you are feeling lucky, you can set that value to 0, to have an unlimited terminal buffer.  However, you can bring your emacs to a crawl if you have a runaway process in your terminal.  I set mine to 10000 now and plan to increase it if performance is not a problem.</p>

<div><script src='https://gist.github.com/rawsyntax/7293989.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293989&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<h2>Term Mode Customizations</h2>

<p>I have a couple minor-modes I'd like to turn off in <code>term-mode</code>.  A hook is provided for this purpose.</p>

<div><script src='https://gist.github.com/rawsyntax/7293879.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293879&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>I run a couple different terminals with <code>multi-term</code>.  I tried the usual way of binding keys to cycle through terminals with <code>M-[</code> and <code>M-]</code>, but <code>local-set-key</code> and others didn't work.  After reading the <code>multi-term.el</code> source code, I found that <code>multi-term</code> handles key bindings using two lists: <code>term-unbind-key-list</code> and <code>term-bind-key-alist</code>.</p>

<div><script src='https://gist.github.com/rawsyntax/7293942.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293942&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>I customize these with:</p>

<div><script src='https://gist.github.com/rawsyntax/7293933.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7293933&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>A note about buffer naming: <code>multi-term-next</code> and <code>multi-term-prev</code> require the terminal buffers to be named in a sequential way.  I tried renaming my terminal buffers and found that the bindings stop working.  Those commands simply implement or decrement the trailing number of the buffer name (e.g. <code>*terminal&lt;1&gt;*</code>).</p>

<p>I also found that yanking / pasting text into a terminal buffer didn't work.  This is frustrating but easily fixed.</p>

<div><script src='https://gist.github.com/rawsyntax/7294123.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7294123&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<h2>Integration</h2>

<p>For ideas on how to integrate terminal actions into your emacs workflow see my <a href="http://rawsyntax.com/blog/learn-emacs-fit-your-workflow/">previous post</a>.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Living with Boxen]]></title>
<link href="http://rawsyntax.com/blog/living-with-boxen/"/>
<updated>2013-07-06T03:23:44-04:00</updated>
<id>http://rawsyntax.com/blog/living-with-boxen</id>
<category term="automation" />

      <content type="html"><![CDATA[<p>About 3 months ago I switched to a new 15" retina macbook pro.  My previous OS X install was nearly 4 years old.  I did not want to clone the data over because too much cruft had built up.  I was left with the question of how to quickly and easily setup a laptop for programming work.  I chose <a href="http://boxen.github.com/">Boxen</a> because it was new, and I wanted a repeatable process for machine setup.</p>

<!--more-->


<h2>Promises</h2>

<p>By and large boxen delivers on its promises.  I was able to setup a system for ruby / web development in about 20 minutes (most of that was spent waiting). Simply</p>

<ul>
<li>Download and install XCode and CLI tools</li>
<li>Setup and run boxen.</li>
</ul>


<p>You get a system with rbenv and ruby installed and a bunch of other useful programs.</p>

<h2>Problems</h2>

<p>However, Boxen isn't perfect. It will require some customization sooner or later as you begin to use it for more tasks. This isn't a bad thing, but it requires you to get used to describing your machine configuration with code (Puppet).</p>

<h3>Default packages are for github</h3>

<div><script src='https://gist.github.com/rawsyntax/5940971.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>The above section in the Puppetfile will install <a href="https://github.com/boxen/puppet-nginx">https://github.com/boxen/puppet-nginx</a> .  However this includes custom sites for the folks who work at github, which is not what I wanted. I elected to install nginx the old way <code>brew install nginx</code>, which gives me a vanilla nginx install.</p>

<h3>Homebrew location</h3>

<p>Boxen has its own homebrew installation at <code>/opt/boxen/homebrew/bin/brew</code>. This can be problematic for other tools that look for stuff installed into <code>/usr/local</code>.</p>

<h3>Separation</h3>

<p>Boxen keeps everything under <code>/opt/boxen</code>, which can cause problems with other tools. For example, Rails 2.3 looks for mysql sockets at <code>/tmp/mysql.sock</code> by default, whereas boxen creates the socket at <code>/opt/boxen/data/mysql/socket</code>.  These problems are easy to remedy (specify the socket path), but are stumbling blocks none the less.  Boxen's mysql also runs on an alternate port: <code>13306</code> not <code>3306</code>.</p>

<h2>Thinking in Boxen</h2>

<p>Boxen requires a change in user behavior. Now, when you make a change to your machine's configuration it should be done within boxen. It should be done in an idempotent way. The benefit here is that your customizations end up codified and versioned. So if you had to you could install your boxen on another machine and be ready to work in about 20 minutes.</p>

<h2>Peace of Mind</h2>

<p>Compute peacefully knowing your setup is versioned and repeatable. I now have scripts for setting up nearly every aspect of my machine. Furthermore, these steps now run faster than doing it manually.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Store Window Configuration]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-store-window-configuration/"/>
<updated>2013-04-16T19:40:23-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-store-window-configuration</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>You may have seen my previous post on <a href="http://rawsyntax.com/blog/learn-emacs-fit-your-workflow/">Learn Emacs: Fit your Workflow</a>.  I've improved the function to bring up a full <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Frames.html">frame</a> eshell buffer, and restore back to previous window configuration with less code.  Previously I was using some complex keyboard macros to try to restore my specific usual frame setup.  This rewritten function will work for any frame setup.</p>

<div><script src='https://gist.github.com/rawsyntax/5400598.js'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>I owe this tip to <a href="http://whattheemacsd.com/setup-magit.el-01.html">magnars' emacs configuration</a>.</p>

<p>More on <a href="http://www.gnu.org/software/emacs/manual/html_node/emacs/Registers.html">registers here</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: 24.3 released and NEWS]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-24-dot-3-released-and-news/"/>
<updated>2013-03-11T15:29:00-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-24-dot-3-released-and-news</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>Emacs 24.3 was released today.  If you're on OS X, the easiest way to check it out is by downloading a build from <a href="http://emacsformacosx.com/">EmacsForMacOSX</a>.</p>

<p>As for what's new in Emacs 24.3, in true Emacs fashion, we can ask it directly.</p>

<pre><code>M-x view-emacs-news
</code></pre>

<p>If you're using <a href="http://rawsyntax.com/blog/learn-emacs-smex/">Smex</a> M-x will suggest other view-emacs-* commands.</p>

<p>So next time you're wondering about how to do something in Emacs try asking it directly.</p>

<pre><code>M-x info-emacs-manual
</code></pre>

<p>Will view the Emacs manual as <a href="http://en.wikipedia.org/wiki/Info_(Unix)">info pages</a>.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Fit your Workflow]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-fit-your-workflow/"/>
<updated>2013-02-23T17:02:00-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-fit-your-workflow</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<div class="embed video YouTube"><iframe width="480" height="270" src="http://www.youtube.com/embed/nQ0Q_6HZwwY?feature=oembed" frameborder="0" allowfullscreen></iframe></div>


<p>The visor I refer to is a feature of <a href="http://totalterminal.binaryage.com/">TotalTerminal</a>.</p>

<!--more-->


<p>The elisp code is below:</p>

<div><script src='https://gist.github.com/rawsyntax/5021575.js'></script>
<noscript><pre><code></code></pre></noscript></div>




<div><script src='https://gist.github.com/rawsyntax/5021581.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Quicksilver, Secure Keyboard Entry, and Single Modifier Activation]]></title>
<link href="http://rawsyntax.com/blog/quicksilver-secure-keyboard-entry-and-single-modified-activaction/"/>
<updated>2012-11-08T10:55:00-05:00</updated>
<id>http://rawsyntax.com/blog/quicksilver-secure-keyboard-entry-and-single-modified-activaction</id>
<category term="tools" />

      <content type="html"><![CDATA[<p>I use <a href="http://qsapp.com">Quicksilver</a> all the time.  Despite its bugs,
I prefer it to any of the other launcher type programs that exist.
Nevermind the fact that it is more powerful than most of those other
programs (Alfred, LaunchBar, etc).  The single feature that got me
hooked is the ability to bring up the Quicksilver prompt with a single
keypress.  I have it set up to use the command key.</p>

<p><img src="http://rawsyntax.com/images/single-modifier-activation.png" class ="center"/></p>

<p>Other tools like Alfred won't do this (though it does have the command
key double tap).</p>

<!--more-->


<h2>The Problem</h2>

<p>Right around a year ago I started experiencing issues with single
modifier activation not working occasionally.  At first I didn't know
if it was Quicksilver being buggy or what.  Eventually I noticed that
if my cursor was inside a password field single modifier activation
would not work.  This is apparently a restriction of the operating
system, that doesn't allow Quicksilver (or other programs like it) to
listen to text entry on secure fields.</p>

<p>I also noticed that when I was in Terminal.app single modifier
activation would not work, which was strange because it had worked in
the past (on 10.5 for example).  As a stopgap measure I started using command+space, which seemed to work all the time.</p>

<p>Using that new keybinding was annoying enough that I switched my
terminal and started using iTerm2.app.  It did not have the same
problem as Terminal.app oddly enough.  I finally figured out what
Terminal.app's problem was.</p>

<p><img src="http://rawsyntax.com/images/secure-keyboard-entry.png" class ="center"/></p>

<p>This setting essentially makes all text input in Terminal.app act like
a password field having the same single modifier activation problem as
above.  Turning Secure Keyboard Entry off fixed the problem.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Measuring Slow Code]]></title>
<link href="http://rawsyntax.com/blog/measuring-slow-code/"/>
<updated>2012-09-02T15:59:00-04:00</updated>
<id>http://rawsyntax.com/blog/measuring-slow-code</id>
<category term="programming" /><category term="tools" />

      <content type="html"><![CDATA[<p>Over the years I've found myself needing a quick way to measure some
slow code.  Whether I'm looking at a 100 line function or a 10 line
controller action, sometimes I just need some quick print statements
to determine which part of the code is slow.</p>

<!--more-->


<p>My original approach to doing this would be to mark off sections of
the code with <code>Time.now</code> statements printing out how many seconds each
section took.  This approach is messy because it requires altering the
code a good deal.  And at the end I was left comparing sections of the
code to figure out which part was slower than all the other parts --
doing the math in my head.</p>

<h2>Use Benchmark?</h2>

<p>Ruby has a
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a>
class built in.  I tried using it.  While it can be helpful in certain
situations, if I'm measuring 5 sections of a function there's an awful
lot of code rewriting that has to happen because of the Benchmark
blocks messing with the scope of variables.  That was more work than
it was worth.</p>

<h2>Roll my Own</h2>

<p>I'm hesitant to reinvent the wheel, but in this case I created a very
simple gem to address my needs.  It's called
<a href="https://github.com/rawsyntax/code_timer">CodeTimer</a>.  To use it first
you instantiate it:</p>

<p><figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  ruby'><pre><div class='line'><span class="n">ct</span> <span class="o">=</span> <span class="no">CodeTimer</span><span class="o">.</span><span class="n">new</span>
</div></pre></td></tr></table></div></figure></p>

<p>Then you insert markers for each part that you want to measure:</p>

<p><figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div><div data-line='2' class='line-number'></div><div data-line='3' class='line-number'></div><div data-line='4' class='line-number'></div></pre></td><td class='main  ruby'><pre><div class='line'><span class="n">ct</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="s2">&quot;Part1&quot;</span><span class="p">)</span>
</div><div class='line'><span class="c1"># ... slow code here ...</span>
</div><div class='line'><span class="n">ct</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="s2">&quot;Part2&quot;</span><span class="p">)</span>
</div><div class='line'><span class="c1"># ...</span>
</div></pre></td></tr></table></div></figure></p>

<p>And a marker for stopping measuring:</p>

<p><figure class='code'><div class='highlight'><table><td class='line-numbers' aria-hidden='true'><pre><div data-line='1' class='line-number'></div></pre></td><td class='main  ruby'><pre><div class='line'><span class="n">ct</span><span class="o">.</span><span class="n">end</span>
</div></pre></td></tr></table></div></figure></p>

<p>It returns a formatted string:</p>

<pre><code>Total Time: 17s
Part1:   11% / 2s
Part2:   29% / 5s
Part3:   47% / 8s
Part4:   11% / 2s
</code></pre>

<p>And it's easy to see that Part3 is the slowest section.  Better start
trying to speed up the code there.</p>

<h2>What If This Doesn't Work?</h2>

<p>This isn't the solution for every slow code problem.  If this approach
doesn't yield meaningful results you will have to use a more serious
tool.  However, I reach for this tool first because it's the simplest
thing that could possibly work.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Faster SSH Connections]]></title>
<link href="http://rawsyntax.com/blog/faster-ssh-connections/"/>
<updated>2012-07-11T12:34:00-04:00</updated>
<id>http://rawsyntax.com/blog/faster-ssh-connections</id>
<category term="tools" />

      <content type="html"><![CDATA[<p>Certain servers I connect to on a regular basis are rather slow when
connecting.  Here are some <code>~/.ssh/config</code> options to speed up ssh connections.</p>

<!--more-->


<p>I find this is useful for scripts that make multiple subsequent ssh
connections.  Capistrano comes to mind as well as a couple of scripts
I have that use scp.</p>

<div><script src='https://gist.github.com/rawsyntax/3091626.js'></script>
<noscript><pre><code>Host *
    # don't try to authenticate with Kerberos
    GSSAPIAuthentication no
    GSSAPIKeyExchange no
    # persist the ssh connection for 5 minutes
    # subsequent ssh connections respond faster because its reusing an existing connection
    ControlMaster auto
    ControlPath ~/.ssh/master-%r@%h:%p
    ControlPersist 5m</code></pre></noscript></div>


<h2>Beware Strange Behavior</h2>

<p>I have noticed occasionally that I get some error messages due
to stale master connections.  I think this happens when my computer
powers off without shutting down fully.</p>

<pre><code>Control socket connect(/Users/eric/.ssh/master-user@example.com:22): Connection refused
ControlSocket /Users/eric/.ssh/master-user@example.com:22 already exists, disabling multiplexing
</code></pre>

<p>The connection still works, but it is even slower to connect which
defeats the purpose of using master control sockets.  You can go into
<code>~/.ssh</code> and manually remove the connection files to clean it up.</p>

<p>Furthermore, this behavior can get quite confusing when setting up
ssh-key authentication.  You may think you have it set up correctly
because of lack of a password prompt, but in my case it was reusing
the connection (which is why it didn't prompt me).</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Who Changed my File]]></title>
<link href="http://rawsyntax.com/blog/who-changed-my-file/"/>
<updated>2012-07-02T18:27:00-04:00</updated>
<id>http://rawsyntax.com/blog/who-changed-my-file</id>
<category term="programming" />

      <content type="html"><![CDATA[<p>I was troubleshooting slow page loads on a server running rails
recently.  I noticed that DNS was actually causing an occasional
problem with pageloads.  For whatever reason my <code>/etc/resolv.conf</code>
would get overwritten every once in a while with slow / unresponsive
DNS servers.  I had manually set them to <code>8.8.8.8</code> and <code>8.8.4.4</code>, but
to my suprise the file had been changed.</p>

<!--more-->


<p>I started digging and checking the usual suspects that might alter
that file (<code>dhclient</code>, <code>resolvconf</code> ...).  I didn't find the problem.
This is where <code>auditd</code> comes in handy.  Its a daemon that can be setup
to watch a file and log what program changed it.</p>

<p>I installed <code>auditd</code> and set it up to watch <code>/etc/resolv.conf</code> and log
any write or append actions (as I don't care about who reads it):</p>

<p><code>auditctl -w /etc/resolv.conf -p wa -k resolvconf</code></p>

<p><code>-k</code> here is simply the key by which you can search the audit logs.  I edited the file a few times to test auditd and searched its logs:</p>

<p><code>ausearch -f /etc/resolv.conf</code></p>

<p>It logs all kinds of info.  user id, command run, working directory.
I'm blogging it here mostly so don't forget about it.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Emacs 24.1 is Out]]></title>
<link href="http://rawsyntax.com/blog/emacs-24-dot-1-is-out/"/>
<updated>2012-06-11T16:55:00-04:00</updated>
<id>http://rawsyntax.com/blog/emacs-24-dot-1-is-out</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>Emacs 24.1 was
<a href="http://lists.gnu.org/archive/html/emacs-devel/2012-06/msg00164.html">released</a>
yesterday.</p>

<p>Being the first release version of Emacs 24, I'd suggest trying it
out.  I've been using Emacs 24 since the pretest version started
coming out, and even the recent pretests have been stable for me.</p>

<!--more-->


<h2>Some New Features</h2>

<p>My favorite feature of Emacs 24 is the elisp package manager.  I find
its an extremely convenient way to manage the packages you want your
<code>~/.emacs.d</code> to utilize. It's available via <code>M-x list-packages</code>.  The
canonical package manager is known as the
<a href="http://tromey.com/elpa/">ELPA</a>, but there are other package
managers, such as <a href="http://marmalade-repo.org/">marmalade</a> because the
ELPA doesn't include everything.</p>

<p>Getting the package manager setup is easy.  Here's the minimal code
needed:</p>

<div><script src='https://gist.github.com/rawsyntax/2912673.js'></script>
<noscript><pre><code>(require 'package)

;; optionally add the marmalade repo to list-packages
(add-to-list 'package-archives
         '(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))

(package-initialize)
(package-refresh-contents)</code></pre></noscript></div>


<p>Another new feature is the built-in color-theme facility.  Prior to
Emacs 24 color themes could be created through the
<a href="http://www.emacswiki.org/cgi-bin/wiki?ColorTheme">color-theme</a>
package.  Instead you can now use <code>customize-create-theme</code> to create
color-themes.</p>

<p><img src="http://rawsyntax.com/images/customize-create-theme.jpg" class ="center"/></p>

<p>There's too much to cover in a blogpost, but here's the entire
<a href="https://www.gnu.org/software/emacs/NEWS.24.1">NEWS file</a>, which you
can also view inside emacs with  <code>M-x view-emacs-news</code>.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Smex]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-smex/"/>
<updated>2012-06-06T12:24:00-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-smex</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>Scroll down for code snippets and text.</p>

<div class="embed video YouTube"><iframe width="459" height="344" src="http://www.youtube.com/embed/18u_ieDpr1o?feature=oembed" frameborder="0" allowfullscreen></iframe></div>


<p>Smex is IDO style completion for M-x.  It is very customizable.  I
recommend taking a look at the README for all the available options.
Here's the minimum setup required.</p>

<div><script src='https://gist.github.com/rawsyntax/2883010.js'></script>
<noscript><pre><code>(require 'smex)
(smex-initialize)

(global-set-key (kbd &quot;M-x&quot;) 'smex)
(global-set-key (kbd &quot;M-X&quot;) 'smex-major-mode-commands)
(global-set-key (kbd &quot;C-c M-x&quot;) 'smex-update)
(global-set-key (kbd &quot;C-c C-c M-x&quot;) 'execute-extended-command)</code></pre></noscript></div>


<p>It's available on the ELPA and the source is on github.</p>

<p><a href="https://github.com/nonsequitur/smex/">Smex source on github</a><br />
<a href="http://marmalade-repo.org/packages/smex">available on marmalade repo</a></p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: Editing Javascript]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-editing-javascript/"/>
<updated>2012-05-31T17:07:00-04:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-editing-javascript</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p>One of my favorite things about emacs is its javascript modes.  While
there are a million options, I'm only going to talk about how I edit
javascript with emacs.</p>

<!--more-->


<h2>Which Mode do I Use?</h2>

<p>I use <a href="http://code.google.com/p/js2-mode/">js2-mode</a>.  It provides
syntax highlighting and underlines errors as you type.  This mode
doesn't come with emacs, it was built by Steve Yegge.  However it is
installable through the ELPA.</p>

<p>One problem I found with this mode is that it has some weird ideas
about indentation.  I personally prefer the indentation from the
built-in <code>js-mode</code> in emacs.  After some googling I came across a
<a href="http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode">blogpost</a>
on fixing indentation in <code>js2-mode</code>.  Starting with that I then made my
own modifications and have a <code>js2-mode</code> that works exactly the way I
want it (code below).</p>

<div><script src='https://gist.github.com/rawsyntax/2846385.js'></script>
<noscript><pre><code>(add-to-list 'auto-mode-alist '(&quot;\\.js$&quot; . js2-mode))
(add-to-list 'auto-mode-alist '(&quot;\\.json$&quot; . js2-mode))


;; Use js-mode indentation in js2-mode, I don't like js2-mode's indentation
;;
;; thanks http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
;; with my own modifications
;;
(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (js--proper-indentation parse-status))
           node)

      (save-excursion

        (back-to-indentation)
        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = &quot;bar&quot;,
        ;;     bar = &quot;foo&quot;;
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation ( 4 indentation))))

      (indent-line-to indentation)
      (when (&gt; offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (&lt; (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the &quot;buffer
          ;; modified&quot; property for nothing
          (beginning-of-line)
          (unless (looking-at &quot;\\s-*$&quot;)
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'js)
  (setq js-indent-level 2
        indent-tabs-mode nil
        c-basic-offset 2)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map [(meta control \;)] 
    '(lambda()
       (interactive)
       (insert &quot;/* -----[ &quot;)
       (save-excursion
         (insert &quot; ]----- */&quot;))
       ))
  (define-key js2-mode-map [(return)] 'newline-and-indent)
  (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map [(control meta q)] 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
    (js2-highlight-vars-mode))
  (message &quot;My JS2 hook&quot;))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

</code></pre></noscript></div>


<h2>Editing Javascript in HTML</h2>

<p>In my experience I'm not always editing pure <code>.js</code> files.  Sometimes
I'm editing javascript inside a <code>.haml</code>, <code>.erb</code>, or <code>.html</code> file.  The
<code>haml-mode</code> I am using is supposed to have easy <code>js-mode</code> integration.
However I tried to integrate <code>js2-mode</code>, and it was not simple.
Furthermore, the built-in javascript highlighting seems to break on a
regular basis.  Troubleshooting that problem looked like it was going
to take more time than I had. Instead I wrote some elisp to allow me
to quickly create a javascript scratch buffer.</p>

<h2>Javascript Scratch Buffer</h2>

<p>I use this to write javascript and copy / paste between buffers until
I'm happy with the code.  It's a very simple solution to the problem.
It creates a buffer named scratch-js with <code>js2-mode</code>.  It's not unlike
the elisp scratch buffer that comes up on emacs start up.  I don't
write javascript all the time, so this solution works pretty well for me.</p>

<div><script src='https://gist.github.com/rawsyntax/2846414.js'></script>
<noscript><pre><code>(defun scratch-js ()
  &quot;Create or switch to a javascript mode scratch buffer&quot;
  (interactive)

  (if (not (eq nil (get-buffer &quot;scratch-js&quot;)))
      (switch-to-buffer &quot;scratch-js&quot;)
    (set-buffer (get-buffer-create &quot;scratch-js&quot;))
    (js2-mode)
    (switch-to-buffer &quot;scratch-js&quot;)))</code></pre></noscript></div>


<p>This is admittedly a stopgap solution.  I would prefer to have
<code>js2-mode</code> integrated tightly with <code>haml-mode</code>.  If anyone else has
actually done this, I would love to see the code.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Reload your app with Guard and Pow]]></title>
<link href="http://rawsyntax.com/blog/reload-your-app-with-guard-and-pow/"/>
<updated>2012-02-22T15:06:00-05:00</updated>
<id>http://rawsyntax.com/blog/reload-your-app-with-guard-and-pow</id>
<category term="programming" /><category term="ruby" />

      <content type="html"><![CDATA[<p>About 6 months ago I started using <a href="http://pow.cx/">Pow</a> for serving
my apps in development mode.  It loads any RACK compatible app, and
allows you to access your projects via the <code>.dev</code> and named symlinks
stored in <code>~/.pow</code> (for example <code>http://my_project.dev</code>).  No need to
specify a port either!</p>

<!--more-->


<p>Very shortly afterwards I ran into a problem.  When I'm working on a
Sinatra app, normally I use the
<a href="https://github.com/rtomayko/shotgun">shotgun</a> gem for automatic
reloading. I can't do that when I'm running Pow.  So I dug into Pow's
documentation.</p>

<p>Pow supports passenger-style reloads via these commands:</p>

<pre><code>touch tmp/restart.txt
touch tmp/always_restart.txt
</code></pre>

<p>That's somewhat helpful.  However, remembering to run <code>touch tmp/restart.txt</code> every time I make a change is a pain.  Creating <code>tmp/always_restart.txt</code> reloads every time, but makes the app painfully slow.  I don't need a reload for every css / image / js asset that is fetched.</p>

<p><a href="https://github.com/guard/guard">Guard</a> to the rescue!  Guard is a
simple tool.  Watch files; run commands on change.  There is already a
<a href="https://github.com/guard/guard-pow">guard-pow</a> gem.  Which touches
<code>tmp/restart.txt</code> on file change.</p>

<p>To use it, add <code>guard-pow</code> to your Gemfile.  Then define a Guardfile
telling it which files to watch.  Your specific files may differ, but
this works for my needs.</p>

<div><script src='https://gist.github.com/rawsyntax/7297149.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7297149&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>Finally, run <code>bundle exec guard</code>.  It will print when it restarts pow.
I like this approach because it can be adapted to any RACK compatible
app by changing which files get watched.  Also, it doesn't require you
to change any application specific code; It's only necessary to add
guard to the Gemfile.</p>
]]></content>
    </entry>
  
    <entry>
      




<title type="html"><![CDATA[Learn Emacs: How to Break Bad Habits]]></title>
<link href="http://rawsyntax.com/blog/learn-emacs-how-to-break-bad-habits/"/>
<updated>2012-02-14T10:10:00-05:00</updated>
<id>http://rawsyntax.com/blog/learn-emacs-how-to-break-bad-habits</id>
<category term="learn-emacs" />

      <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/arrow-keys.jpg" class ="center"/></p>

<p>The best thing to do is never to form bad habits in the first place.
However if you didn't have any bad habits, you wouldn't be reading
this blog post.  Here's what has worked for me.</p>

<!--more-->


<h3>Make a Note of It</h3>

<p>One of my bad habits was using the arrow keys for navigation in emacs.
It's inefficient.  Emacs already has keybindings for next / previous
and back / forward -- and I don't have to pick up my hands for those.
The first thing I did was start keeping a short list of bad emacs
habits.</p>

<p>Don't think about fixing every bad habit immediately.  Just note them
and move on with real work.  These also don't have to be bad habits
per say.  They can be inefficiencies as well.  Is there a better way to
do that thing you do all the time, but you've been putting off putting
in the time to build it?</p>

<h3>Fix One Bad Habit</h3>

<p>After years of using the arrow keys in emacs, I decided it was time
for that to stop.  Because my emacs config is versioned.  I can see
that I decided to stop on <code>Fri Sep 16 10:53:49 2011 -0400</code>.  Work on
fixing this one habit until its completely fixed.  My fix was pretty
simple.</p>

<div><script src='https://gist.github.com/rawsyntax/1794878.js'></script>
<noscript><pre><code>commit 11dce2502c111ff9ae73f95dde89f27d0f84416a
Author: Eric Himmelreich &lt;eric@rawsyntax.com&gt;
Date:   Fri Sep 16 10:53:49 2011 -0400

    break arrow keys habit, I already know the emacs bindings for moving

    Modified   eric/bindings.el
diff --git a/eric/bindings.el b/eric/bindings.el
index 9915c7e..bb9d4fc 100644
--- a/eric/bindings.el
+++ b/eric/bindings.el
@@ -8,3 +8,9 @@
 
 (global-set-key (kbd &quot;C-w&quot;) 'backward-kill-word)
 (global-set-key (kbd &quot;C-x C-k&quot;) 'kill-region)
+
+;; stop using the arrow keys
+(global-unset-key [left])
+(global-unset-key [up])
+(global-unset-key [right])
+(global-unset-key [down])

[back] 
</code></pre></noscript></div>


<p>Unbind the arrow keys and it becomes pretty tough to use them.  I
don't use the arrow keys any more.  Maybe your fix is more complicated.
Maybe it's writing an emacs macro for something you do frequently.</p>

<h3>Schedule Time for This</h3>

<p>Its a bad idea to try to fix emacs problems while on a tight deadline
for a project.  However you will find yourself with a spare 30 minutes
or an hour here and there.  Make that your emacs improvement time.</p>

<p>Almost a year ago I found myself with an ever growing emacs problem.
My config files had grown out of control.  They were a huge mess and
impossible to manage.  Even though I was using version control my
config still had lots of local changes and files that weren't tracked
at all.  And my github repo was never up to date. I was in need of a
fresh emacs config.  I needed organization and simplicity.</p>

<p>When would I ever have time to rewrite my entire emacs config?</p>

<p>I started making time on <code>Tue Jun 21 18:18:41 2011 -0400</code> as I had read
about <code>emacs-starter-kit (v2)</code>.  Its basis was emacs-24 paired with
the marmalade-repo (for emacs-lisp packages).  I put in an n hour here
and there over the course of a few months.  In mid September it was good
enough to use as my full-time working config.</p>
]]></content>
    </entry>
  
</feed>
