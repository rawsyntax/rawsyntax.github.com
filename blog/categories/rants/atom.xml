<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rants | Raw Syntax]]></title>
  <link href="http://rawsyntax.com/blog/categories/rants/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2011-11-30T22:29:57-05:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Purchasing Electronic Media]]></title>
    <link href="http://rawsyntax.com/blog/purchasing-electronic-media/"/>
    <updated>2011-11-30T19:11:00-05:00</updated>
    <id>http://rawsyntax.com/blog/purchasing-electronic-media</id>
    <content type="html"><![CDATA[<pre><code>&lt;rant&gt;
</code></pre>

<p><img src="http://rawsyntax.com/images/20-bucks.jpg" class="center" alt="$20" /></p>

<p>Recently I read
<a href="http://derekwebb.tumblr.com/post/13503899950/giving-it-away-how-free-music-makes-more-than-sense">Derek Webber's post about Spotify</a>,
in which he says:</p>

<p><blockquote><p>I am paid $0.00029 per stream of a song on Spotify, and even this amount depends on whether the song is being streamed by a paid user or someone using the service for free.  This means it will take upwards of 3,500 streams of a single song on Spotify to earn $1.00 versus that same revenue for one iTunes song purchase</p><footer><strong>Derek Webber</strong><cite><a href='http://derekwebb.tumblr.com/post/13503899950/giving-it-away-how-free-music-makes-more-than-sense'>derekwebb.tumblr.com/post/&hellip;</a></cite></footer></blockquote></p>

<p>His article made me think of a time years ago when I wanted to be in the
music business.</p>

<p>When I was about 12 or 13 I started playing bass guitar.  From then on
I was enamored with music.  Playing it, listening to it, thinking
about playing it etc...  Then when I was in 11th grade I had the
opportunity to take an AP computer science course.  I took it, 5'ed
the AP test, and promptly stopped programming at all.  By the time I
was in 12th grade I was convinced I'd go to college as a music
business major.  Play music and get paid?  Sounds like a party right?  Why not?</p>

<h3>Getting Paid (for Music) is Complicated</h3>

<p>My first semester in college we had a silly 0 credit hour course for 3
hours each week where the professors basically talked about the music
business.  They related anecdotal stuff about copyright, various
record label / venue contract issues, and all kinds of other issues.
This class was a big red flag for me.  They went over how you get paid
royalties in various situations and how little you get paid for them
(even if you got a good deal).</p>

<p>The gist of the class as I understood it was that most of the money is
in publishing, and if you're not at the top already it's basically a
roll of the dice as far as making a comfortable living at it.</p>

<h3>I Didn't go to College to Roll the Dice</h3>

<p>If being there wasn't helping my chances of getting a good paying gig
after graduating, then why was I there at all?  Furthermore, I
apparently had already taken in highschool all the required math for
my major.  I found that to be ridiculous because math is useful, and
I'm a nerd at heart.  It's just that some how programming has become
cool, or at least that's what I tell myself.</p>

<p>While the music business classes were fun and pretty easy (admittedly
these were only first year first semester courses), I got an eerie
feeling that I would have a hard time getting paid after college
because of all these issues that were outlined in that 0 credit hour
class.</p>

<p>Oops, I skipped a part.  I had a summer job at Kroger bagging groceries when I
was 15.  It was then that I realized that bagging groceries doesn't
pay enough, and that if I didn't do something about it I could be
bagging groceries for the rest of my life.  There's nothing wrong with that
except for the fact that minimum wage isn't a living wage (for me).</p>

<h3>Ahh.. Back to Math!</h3>

<p>As the semester drew to a close, I realized that what I most wanted to
do was play with all the computer stuff in the recording studio.
Namely, that G4 Macintosh running all the software.  The choice became
obvious to me.  I changed my major to computer science and added a minor in math.</p>

<p>I felt like that was a pretty good bet for getting a job after
college, and I knew I was reasonably good at it.  Mostly importantly I
felt like that was something worth spending 4 years at college doing.
Now on to the topic of this post.</p>

<h3>About Media</h3>

<p>Enough about me, Back to Derek Webber's article.  He concludes his
article by telling his fans to buy or download his music for free, but
he spends most of the words in his article demonizing Spotify.</p>

<p>He's mostly angry about how they pay him so little per streamed track,
and how they don't pay him the same as artists on big name labels.  It
seems to me, if you don't like Spotify's deal, don't take it.  His
criticisms of Spotify seem to be at odds with his proclamation that
record production costs are at an all time low (meaning the artist can
produce and sell his/her own content independently).</p>

<p>Spotify is about adding another tool to the musicians toolbox.  Yet
another way to make money off your music, if you so choose.  This is a
huge difference from <code>back in the day</code> when musicians had to take the
record label's deal or not get any CDs pressed at all.  If anything,
these bad deals that Spotify is able to negotiate are evidence of
musicians making bad deals.  It's in Spotify's best interest to pay as
little money as possible for music.</p>

<p>Anything Spotify says about being good for the music business
or any other <code>feel good talk</code> is simply marketing speak.  That is, it
is their marketing department's job to write up this kind of stuff.</p>

<h3>The Problem Buying Media Legally</h3>

<p>Now I'm not a Spotify fan even though it seems like I'm building them
up.  Spotify is part of the problem in a few ways.  Ever since digital
distribution of media started, piracy and DRM have had a symbiotic relationship.
If there were no piracy, there'd be no need for DRM, and the presence
of DRM punishes customers who try to do the right thing by not
pirating media.</p>

<p><blockquote><p>Customers think they are buying media, and publishers think they are<br/>selling a license to use that media under certain conditions.</p></blockquote></p>

<p>That is the core of the problem.  When I buy an ebook I expect to be
able to read it anywhere I want (like a printed book).  When I buy
music I expect to be able to listen to it under any conditions.  If I
want to record it to a cassette I should be able to.</p>

<p>Arguments about piracy are pretty pointless.  On the one hand you have
companies claiming that every act of piracy counts as a lost sale,
when we know that's not the case.  A lot of pirates don't buy
anything, and then some pirates do make a purchase after trying it out for
free (via a pirated copy).</p>

<h3>It's Not All Bad</h3>

<p>There are a number of publishing companies that are doing this right.
They give you an unencumbered copy of the media, and ask you to do the
right thing and not share it.  Pragmatic Programmers is one such
company that is doing the right thing.  That is a message I can relate
to, and I have purchased a couple books from them.</p>

<h3>Back to How Musicians Are Getting Screwed</h3>

<p>I agree that generally musicians are getting a bad deal.  It's one of
the reasons I decided not to do that for a living.  I don't agree with
the idea that musicians deserve a better deal.  The way the economy
has been for the past few years is evidence that nobody is guaranteed
a good deal.  We are all taking our chances.</p>

<pre><code>&lt;/rant&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problem with &#xb5;-Frameworks]]></title>
    <link href="http://rawsyntax.com/blog/the-problem-with-micro-frameworks/"/>
    <updated>2011-11-27T11:34:00-05:00</updated>
    <id>http://rawsyntax.com/blog/the-problem-with-micro-frameworks</id>
    <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/simple-spaghetti.jpg" class ="center"/></p>

<p>There are plenty of micro-frameworks out there for web development.
Some ruby based ones are Sinatra, Padrino, and Camping.  There's also
Flask and web.py for python.  These frameworks promise quick ramp up
time and simplicity.  They are small and do not provide much
functionality, which is sold as "not getting in your way".</p>

<h3>Great! What's not to like?</h3>

<p>In theory this sounds super, and if you have a project that has a very
limited scope it works very well.  I'm not going to talk much about
that case.  I find the more common case is that the project grows beyond its
original specification.  Then suddenly you may need some of those
features that were stripped out in order for the framework not to get
in your way.  You're left with two options: write the feature yourself
or find a plugin that implements it.</p>

<h3>Missing Features for Managing Complexity</h3>

<p>It can be argued that software development is all about managing
complexity.  Often micro-frameworks strip out useful features in the name
of simplicity.  For example, Sinatra does not come with an acceptable
partials implementation.  Its implementation allows you to render
partials so long as there are no instance variables to be passed in.
It is only useful for static html partials.  This omission just makes
programming with sinatra harder.  Partial Rendering is a feature that helps reduce complexity.  It serves to break up large complex views into smaller manageable pieces and also DRY up the code.</p>

<h3>Fat App on a Thin Framework</h3>

<p><img src="http://rawsyntax.com/images/complex-spaghetti.jpg" class ="center"/></p>

<p>Pretty soon you find yourself managing a project on a micro-framework
with 10 external plugins for the various functionality that was not
included out of the box.  So now you're using a micro-framework that
is no longer so simple.  Its intent to stay out of your way has
actually made things harder now since your upgrade path is more
complex.  When you upgrade the micro-framework how many of your
plugins will still work?  How does the complexity of a micro-framework
and 10 plugins compare to a regular framework (rails in the case of
sinatra)?  You also have to be sure that the combination of plugins
you are using do not conflict with eachother and cause unintended side-effects.</p>

<h3>Thin App on Fat Framework</h3>

<p>For the project that grows beyond its initial scope, I prefer to start
with a thin application on top of a fat framework.  There's just less
for me to maintain and to test.  In the early days of the project its a really small app, and then when it grows larger it doesn't
start working against the framework.</p>

<h3>Micro-Frameworks are Only Good for Micro-Projects</h3>

<p>This is not meant to disparage all the micro-frameworks out there.  I
believe they solve a specific problem.  I use micro-frameworks when
the project is a good fit for them.  However, knowing a
micro-framework really well is not a good excuse for not knowing a
more powerful framework.  Sometimes the more powerful framework is
what is needed.</p>
]]></content>
  </entry>
  
</feed>
