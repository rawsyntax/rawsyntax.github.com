<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rants | Raw Syntax]]></title>
  <link href="http://rawsyntax.com/blog/categories/rants/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2012-07-02T19:06:09-04:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Stop Programming]]></title>
    <link href="http://rawsyntax.com/blog/stop-programming/"/>
    <updated>2012-01-04T15:25:00-05:00</updated>
    <id>http://rawsyntax.com/blog/stop-programming</id>
    <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/stop-programming.jpg" alt="Stop Programming" class="center"/></p>

<p>I've got some ideas on how you can improve your programming by not
programming.  Try something new this year.</p>

<!--more-->


<h3>Simplifying Too Much</h3>

<p>About 4 years ago, I fell in love with minimalism and tried to get rid of most of my possessions.  I went as far as selling my saxophone, (3) bass guitars,  and bass rig.  This meant not playing music any more.  At the time I decided that playing music was nonessential since it did not relate to programming and didn't make any money.  I also sold my bicycle (which meant no more cycling).</p>

<p>Pretty soon after that I was just a guy who programmed at work and
worked on programming projects at home.  In other words, not very interesting.</p>

<p>The great secret of minimalism (taken to an extreme), is that if you
take away everything you are left with nothing.  In my case I realized
I didn't do anything for fun anymore.  I've since bought a bass,
bass rig, and bicycle and started teaching myself classical / flamenco guitar.</p>

<h3>Be a Beginner Again</h3>

<p>I think there's a problem lurking in many programming communities
(forums, IRC, mailing lists).  Every so often a beginner comes a long
and asks a basic question in the wrong way.  He doesn't follow the
rules of the community.  So a long-standing member of the community
replies "use the search", "read the FAQ",  or a similar useless
answer.  Go and search any forum you will find useless results like
this.  This is not only unfriendly, but can pollute search results for
others that visit later with the same questions, which eventually
renders the "use the search" solution useless.</p>

<p>While I agree that a community's rules of etiquette should be
followed, I think some members of these online communities have
forgotten what it's like to be a beginner.  Often newbie may not
know what to search or need some extra explanation regarding a common
problem. I found this to be the case when starting out with <a href="/blog/categories/learn-emacs/">emacs</a>,
wherein reading the manual and using the help system are actually part
of emacs itself and can be confusing if you don't even know how to use
the thing.</p>

<p>That's why I recommend trying something other than programming.  Go
for something unrelated.  Something where you will be a complete
beginner.  Try learning a musical instrument, building a bike,
woodworking, etc...  Next time you're helping out a beginner you may
find yourself being more helpful and patient.</p>

<h3>Expand Your Mind</h3>

<p>The other reason to try something new is that it may eventually lead
you to approach programming problems in a different or unconvential
way.  Much of what we do is done by way of analogy.  OOP works by
making a model that approximates real situations.  Eventually you'll
run into a real programming problem that can be solved using methods
from the real world.</p>

<p>Furthermore, programming is creative work.  It can be helpful to look
elsewhere for inspiration.  Often I find myself thinking of
programming as an art, as self-expression (albeit with many real world
constraints; self-expression won't necessarily create useful
programs).  To get a better idea of what I mean check out <a
href="http://www.amazon.com/gp/product/0931137071/ref=as_li_qf_sp_asin_tl?ie=UTF8&tag=rawsyntax-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0931137071">The Tao of Programming</a><img src="http://www.assoc-amazon.com/e/ir?t=rawsyntax-20&l=as2&o=1&a=0931137071" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />.  Though it is written in a somewhat joking
manner, there is truth in it.</p>

<p>My favorite section is <strong>2.4</strong>:</p>

<p><blockquote><p>A novice asked the Master: ``Here is a programmer that never designs, documents or tests his programs. Yet all who know him consider him one of the best programmers in the world. Why is this?''</p></p><p><p>The Master replies: ``That programmer has mastered the Tao. He has<br/>gone beyond the need for design; he does not become angry when the<br/>system crashes, but accepts the universe without concern. He has gone<br/>beyond the need for documentation; he no longer cares if anyone else<br/>sees his code. He has gone beyond the need for testing; each of his<br/>programs are perfect within themselves, serene and elegant, their<br/>purpose self-evident. Truly, he has entered the mystery of Tao.''</p><footer><strong>The Tao of Programming</strong><cite><a href='http://www.amazon.com/gp/product/0931137071/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;tag=rawsyntax-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0931137071'>www.amazon.com/gp/product/&hellip;</a></cite></footer></blockquote></p>

<p>Though this style of programming is totally impractical for designing
reliable extensible software, I ponder it every few months because
it is such a different perspective.  What if you were able to write a
program that had the intuitive cohesion of a poem?</p>

<h3>Now Go Do Something Else</h3>

<p>That's it.  Try something different and new this year.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes Side Projects Fail]]></title>
    <link href="http://rawsyntax.com/blog/sometimes-side-projects-fail/"/>
    <updated>2011-12-09T11:44:56-05:00</updated>
    <id>http://rawsyntax.com/blog/sometimes-side-projects-fail</id>
    <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/side-projects-fail.jpg" alt="Sometimes Side Projects Fail" class="center"/></p>

<p>I've worked on a few side projects over the years.  Sometimes they've
turned out well, and other times I stopped working on them.  How do
you know when it's time to throw in the towel and when it's time to
push through?</p>

<!--more-->


<p>Roughly a year ago a friend and I were working on a bill splitting
system.  It was supposed to solve the problem of splitting bills
between friends.  More specifically, splitting regularly occuring or
one time expenses between roommates.  Rather than worrying about
having cash, or writing a check and waiting for it to cash, we built a
system which piggybacked off of paypal's API to send bill and payment
notifications via email, which would generate a web checkout page
where the debt could be paid online through paypal.</p>

<p>See how long the previous sentence is?  Sounds too complicated already
and I'm the one who built it. The eventual idea was that we would wrap
this in a native client wrapper, so that if you're out to dinner with
your friends you don't have to worry about splitting the bill.  One
person will pick up the entire bill, split it and send bill
notifications via email to all the other people.  Then the others pull
out their phones and enter their paypal accounts and send payment for
their portion of the bill.  The bill can be settled on the spot.</p>

<h3>Not Every Idea is a Hit</h3>

<p>In a perfect world every side-project would be a hit that turns into
a business that generates lots of profit for little work.  In practice
this actually can be quite difficult to pull off.  Furthermore
sometimes those big hits aren't actually big hits when they start.  It
make take a couple of years of work to pull.  But how do you know if
your idea is taking a couple of years to get started or simply not
good at all?  Nobody wants to be a quitter, and worse nobody wants to
quit a good idea that ends up making someone else rich.  But there's
also more to life than money.</p>

<p>After working on this idea for a few hours a week for a couple months
we eventually decided to scrap it.  There really didn't seem to be a simple
way to make money with this idea.  It may have been a useful service,
but there are already similar free services out there for this.  Over
the years, I've grown to have an affinity for ideas that have
monetization strategies that are simple to understand.  In my
experience, the more complicated it is, the less the likelyhood of
actually making money.</p>

<p>Most importantly I wasn't particularly passionate about the idea, and
I didn't like the idea of piggybacking off of Paypal because of their
horrible customer service (I recently had my funds availability
delayed for 3 weeks with no explanation, and I've had an account for 7
years and an ebay account with perfect feedback).  But using another
online payment system made the idea less useful because other peer to
peer payment systems simply aren't as ubiquitous.</p>

<h3>Benefits of Side Projects</h3>

<p>Often the benefits are not monetary in nature.  In the case of this
bill splitting website, I used it at the time to keep up to date with
rails 3 and refresh my skills a little bit.  I was using Merb for most
projects at work at the time. Furthermore, working on small side
projects now and then keeps you familiar with how to start a project
from scratch and increases the breadth of your knowledge.  If its a
small project with just one person working on it, you have to be the
one to do everything (or at least hire the contractors that will do
the part outside your expertise, which is a skill in itself).</p>

<p>The most important thing is to simplify your idea.  Then build the
simplest thing that could possibly work.  Then keep at it and don't be
afraid to re-evaluate your idea.  It doesn't make you a quitter to throw out a project that no longer seems reasonable.</p>

<p>Check out an older post of mine about <a href="/blog/importance-of-side-projects/">side projects</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Purchasing Electronic Media]]></title>
    <link href="http://rawsyntax.com/blog/purchasing-electronic-media/"/>
    <updated>2011-11-30T19:11:00-05:00</updated>
    <id>http://rawsyntax.com/blog/purchasing-electronic-media</id>
    <content type="html"><![CDATA[<pre><code>&lt;rant&gt;
</code></pre>

<p><img src="http://rawsyntax.com/images/20-bucks.jpg" class="center" alt="$20" /></p>

<p>Recently I read
<a href="http://derekwebb.tumblr.com/post/13503899950/giving-it-away-how-free-music-makes-more-than-sense">Derek Webber's post about Spotify</a>,
in which he says:</p>

<p><blockquote><p>I am paid $0.00029 per stream of a song on Spotify, and even this amount depends on whether the song is being streamed by a paid user or someone using the service for free.  This means it will take upwards of 3,500 streams of a single song on Spotify to earn $1.00 versus that same revenue for one iTunes song purchase</p><footer><strong>Derek Webber</strong><cite><a href='http://derekwebb.tumblr.com/post/13503899950/giving-it-away-how-free-music-makes-more-than-sense'>derekwebb.tumblr.com/post/&hellip;</a></cite></footer></blockquote></p>

<p>His article made me think of a time years ago when I wanted to be in the
music business.</p>

<!--more-->


<p>When I was about 12 or 13 I started playing bass guitar.  From then on
I was enamored with music.  Playing it, listening to it, thinking
about playing it etc...  Then when I was in 11th grade I had the
opportunity to take an AP computer science course.  I took it, 5'ed
the AP test, and promptly stopped programming at all.  By the time I
was in 12th grade I was convinced I'd go to college as a music
business major.  Play music and get paid?  Sounds like a party right?  Why not?</p>

<h3>Getting Paid (for Music) is Complicated</h3>

<p>My first semester in college we had a silly 0 credit hour course for 3
hours each week where the professors basically talked about the music
business.  They related anecdotal stuff about copyright, various
record label / venue contract issues, and all kinds of other issues.
This class was a big red flag for me.  They went over how you get paid
royalties in various situations and how little you get paid for them
(even if you got a good deal).</p>

<p>The gist of the class as I understood it was that most of the money is
in publishing, and if you're not at the top already it's basically a
roll of the dice as far as making a comfortable living at it.</p>

<h3>I Didn't go to College to Roll the Dice</h3>

<p>If being there wasn't helping my chances of getting a good paying gig
after graduating, then why was I there at all?  Furthermore, I
apparently had already taken in highschool all the required math for
my major.  I found that to be ridiculous because math is useful, and
I'm a nerd at heart.  It's just that some how programming has become
cool, or at least that's what I tell myself.</p>

<p>While the music business classes were fun and pretty easy (admittedly
these were only first year first semester courses), I got an eerie
feeling that I would have a hard time getting paid after college
because of all these issues that were outlined in that 0 credit hour
class.</p>

<p>Oops, I skipped a part.  I had a summer job at Kroger bagging groceries when I
was 15.  It was then that I realized that bagging groceries doesn't
pay enough, and that if I didn't do something about it I could be
bagging groceries for the rest of my life.  There's nothing wrong with that
except for the fact that minimum wage isn't a living wage (for me).</p>

<h3>Ahh.. Back to Math!</h3>

<p>As the semester drew to a close, I realized that what I most wanted to
do was play with all the computer stuff in the recording studio.
Namely, that G4 Macintosh running all the software.  The choice became
obvious to me.  I changed my major to computer science and added a minor in math.</p>

<p>I felt like that was a pretty good bet for getting a job after
college, and I knew I was reasonably good at it.  Mostly importantly I
felt like that was something worth spending 4 years at college doing.
Now on to the topic of this post.</p>

<h3>About Media</h3>

<p>Enough about me, Back to Derek Webber's article.  He concludes his
article by telling his fans to buy or download his music for free, but
he spends most of the words in his article demonizing Spotify.</p>

<p>He's mostly angry about how they pay him so little per streamed track,
and how they don't pay him the same as artists on big name labels.  It
seems to me, if you don't like Spotify's deal, don't take it.  His
criticisms of Spotify seem to be at odds with his proclamation that
record production costs are at an all time low (meaning the artist can
produce and sell his/her own content independently).</p>

<p>Spotify is about adding another tool to the musicians toolbox.  Yet
another way to make money off your music, if you so choose.  This is a
huge difference from <code>back in the day</code> when musicians had to take the
record label's deal or not get any CDs pressed at all.  If anything,
these bad deals that Spotify is able to negotiate are evidence of
musicians making bad deals.  It's in Spotify's best interest to pay as
little money as possible for music.</p>

<p>Anything Spotify says about being good for the music business
or any other <code>feel good talk</code> is simply marketing speak.  That is, it
is their marketing department's job to write up this kind of stuff.</p>

<h3>The Problem Buying Media Legally</h3>

<p>Now I'm not a Spotify fan even though it seems like I'm building them
up.  Spotify is part of the problem in a few ways.  Ever since digital
distribution of media started, piracy and DRM have had a symbiotic relationship.
If there were no piracy, there'd be no need for DRM, and the presence
of DRM punishes customers who try to do the right thing by not
pirating media.</p>

<p><blockquote><p>Customers think they are buying media, and publishers think they are<br/>selling a license to use that media under certain conditions.</p></blockquote></p>

<p>That is the core of the problem.  When I buy an ebook I expect to be
able to read it anywhere I want (like a printed book).  When I buy
music I expect to be able to listen to it under any conditions.  If I
want to record it to a cassette I should be able to.</p>

<p>Arguments about piracy are pretty pointless.  On the one hand you have
companies claiming that every act of piracy counts as a lost sale,
when we know that's not the case.  A lot of pirates don't buy
anything, and then some pirates do make a purchase after trying it out for
free (via a pirated copy).</p>

<h3>It's Not All Bad</h3>

<p>There are a number of publishing companies that are doing this right.
They give you an unencumbered copy of the media, and ask you to do the
right thing and not share it.  Pragmatic Programmers is one such
company that is doing the right thing.  That is a message I can relate
to, and I have purchased a couple books from them.</p>

<h3>Back to How Musicians Are Getting Screwed</h3>

<p>I agree that generally musicians are getting a bad deal.  It's one of
the reasons I decided not to do that for a living.  I don't agree with
the idea that musicians deserve a better deal.  The way the economy
has been for the past few years is evidence that nobody is guaranteed
a good deal.  We are all taking our chances.</p>

<pre><code>&lt;/rant&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Problem with &#xb5;-Frameworks]]></title>
    <link href="http://rawsyntax.com/blog/the-problem-with-micro-frameworks/"/>
    <updated>2011-11-27T11:34:00-05:00</updated>
    <id>http://rawsyntax.com/blog/the-problem-with-micro-frameworks</id>
    <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/simple-spaghetti.jpg" class ="center"/></p>

<p>There are plenty of micro-frameworks out there for web development.
Some ruby based ones are Sinatra, Padrino, and Camping.  There's also
Flask and web.py for python.  These frameworks promise quick ramp up
time and simplicity.  They are small and do not provide much
functionality, which is sold as "not getting in your way".</p>

<!--more-->


<h3>Great! What's not to like?</h3>

<p>In theory this sounds super, and if you have a project that has a very
limited scope it works very well.  I'm not going to talk much about
that case.  I find the more common case is that the project grows beyond its
original specification.  Then suddenly you may need some of those
features that were stripped out in order for the framework not to get
in your way.  You're left with two options: write the feature yourself
or find a plugin that implements it.</p>

<h3>Missing Features for Managing Complexity</h3>

<p>It can be argued that software development is all about managing
complexity.  Often micro-frameworks strip out useful features in the name
of simplicity.  For example, Sinatra does not come with an acceptable
partials implementation.  Its implementation allows you to render
partials so long as there are no instance variables to be passed in.
It is only useful for static html partials.  This omission just makes
programming with sinatra harder.  Partial Rendering is a feature that helps reduce complexity.  It serves to break up large complex views into smaller manageable pieces and also DRY up the code.</p>

<h3>Fat App on a Thin Framework</h3>

<p><img src="http://rawsyntax.com/images/complex-spaghetti.jpg" class ="center"/></p>

<p>Pretty soon you find yourself managing a project on a micro-framework
with 10 external plugins for the various functionality that was not
included out of the box.  So now you're using a micro-framework that
is no longer so simple.  Its intent to stay out of your way has
actually made things harder now since your upgrade path is more
complex.  When you upgrade the micro-framework how many of your
plugins will still work?  How does the complexity of a micro-framework
and 10 plugins compare to a regular framework (rails in the case of
sinatra)?  You also have to be sure that the combination of plugins
you are using do not conflict with eachother and cause unintended side-effects.</p>

<h3>Thin App on Fat Framework</h3>

<p>For the project that grows beyond its initial scope, I prefer to start
with a thin application on top of a fat framework.  There's just less
for me to maintain and to test.  In the early days of the project its a really small app, and then when it grows larger it doesn't
start working against the framework.</p>

<h3>Micro-Frameworks are Only Good for Micro-Projects</h3>

<p>This is not meant to disparage all the micro-frameworks out there.  I
believe they solve a specific problem.  I use micro-frameworks when
the project is a good fit for them.  However, knowing a
micro-framework really well is not a good excuse for not knowing a
more powerful framework.  Sometimes the more powerful framework is
what is needed.</p>
]]></content>
  </entry>
  
</feed>
