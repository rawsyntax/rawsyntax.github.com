<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Raw Syntax]]></title>
  <link href="http://rawsyntax.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2012-09-02T16:38:04-04:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Measuring Slow Code]]></title>
    <link href="http://rawsyntax.com/blog/measuring-slow-code/"/>
    <updated>2012-09-02T15:59:00-04:00</updated>
    <id>http://rawsyntax.com/blog/measuring-slow-code</id>
    <content type="html"><![CDATA[<p>Over the years I've found myself needing a quick way to measure some
slow code.  Whether I'm looking at a 100 line function or a 10 line
controller action, sometimes I just need some quick print statements
to determine which part of the code is slow.</p>

<p>My original approach to doing this would be to mark off sections of
the code with <code>Time.now</code> statements printing out how many seconds each
section took.  This approach is messy because it requires altering the
code a good deal.  And at the end I was left comparing sections of the
code to figure out which part was slower than all the other parts --
doing the math in my head.</p>

<h2>Use Benchmark?</h2>

<p>Ruby has a
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a>
class built in.  I tried using it.  While it can be helpful in certain
situations, if I'm measuring 5 sections of a function there's an awful
lot of code rewriting that has to happen because of the Benchmark
blocks messing with the scope of variables.  That was more work than
it was worth.</p>

<h2>Roll my Own</h2>

<p>I'm hesitant to reinvent the wheel, but in this case I created a very
simple gem to address my needs.  It's called
<a href="https://github.com/rawsyntax/code_timer">CodeTimer</a>.  To use it first
you instantiate it:</p>

<p><code>ruby
ct = CodeTimer.new
</code></p>

<p>Then you insert markers for each part that you want to measure:</p>

<p>``` ruby
ct.start("Part1")</p>

<h1>... slow code here ...</h1>

<p>ct.start("Part2")</p>

<h1>...</h1>

<p>```</p>

<p>And a marker for stopping measuring:</p>

<p><code>ruby
ct.end
</code></p>

<p>It returns a formatted string:</p>

<pre><code>Total Time: 17s
Part1:   11% / 2s
Part2:   29% / 5s
Part3:   47% / 8s
Part4:   11% / 2s
</code></pre>

<p>And it's easy to see that Part3 is the slowest section.  Better start
trying to speed up the code there.</p>

<h2>What If This Doesn't Work?</h2>

<p>This isn't the solution for every slow code problem.  If this approach
doesn't yield meaningful results you will have to use a more serious
tool.  However, I reach for this tool first because it's the simplest
thing that could possibly work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who Changed my File]]></title>
    <link href="http://rawsyntax.com/blog/who-changed-my-file/"/>
    <updated>2012-07-02T18:27:00-04:00</updated>
    <id>http://rawsyntax.com/blog/who-changed-my-file</id>
    <content type="html"><![CDATA[<p>I was troubleshooting slow page loads on a server running rails
recently.  I noticed that DNS was actually causing an occasional
problem with pageloads.  For whatever reason my <code>/etc/resolv.conf</code>
would get overwritten every once in a while with slow / unresponsive
DNS servers.  I had manually set them to <code>8.8.8.8</code> and <code>8.8.4.4</code>, but
to my suprise the file had been changed.</p>

<p>I started digging and checking the usual suspects that might alter
that file (<code>dhclient</code>, <code>resolvconf</code> ...).  I didn't find the problem.
This is where <code>auditd</code> comes in handy.  Its a daemon that can be setup
to watch a file and log what program changed it.</p>

<p>I installed <code>auditd</code> and set it up to watch <code>/etc/resolv.conf</code> and log
any write or append actions (as I don't care about who reads it):</p>

<p><code>auditctl -w /etc/resolv.conf -p wa -k resolvconf</code></p>

<p><code>-k</code> here is simply the key by which you can search the audit logs.  I edited the file a few times to test auditd and searched its logs:</p>

<p><code>ausearch -f /etc/resolv.conf</code></p>

<p>It logs all kinds of info.  user id, command run, working directory.
I'm blogging it here mostly so don't forget about it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reload your app with Guard and Pow]]></title>
    <link href="http://rawsyntax.com/blog/reload-your-app-with-guard-and-pow/"/>
    <updated>2012-02-22T15:06:00-05:00</updated>
    <id>http://rawsyntax.com/blog/reload-your-app-with-guard-and-pow</id>
    <content type="html"><![CDATA[<p>About 6 months ago I started using <a href="http://pow.cx/">Pow</a> for serving
my apps in development mode.  It loads any RACK compatible app, and
allows you to access your projects via the <code>.dev</code> and named symlinks
stored in <code>~/.pow</code> (for example <code>http://my_project.dev</code>).  No need to
specify a port either!</p>

<!--more-->


<p>Very shortly afterwards I ran into a problem.  When I'm working on a
Sinatra app, normally I use the
<a href="https://github.com/rtomayko/shotgun">shotgun</a> gem for automatic
reloading. I can't do that when I'm running Pow.  So I dug into Pow's
documentation.</p>

<p>Pow supports passenger-style reloads via these commands:</p>

<pre><code>touch tmp/restart.txt
touch tmp/always_restart.txt
</code></pre>

<p>That's somewhat helpful.  However, remembering to run <code>touch tmp/restart.txt</code> every time I make a change is a pain.  Creating <code>tmp/always_restart.txt</code> reloads every time, but makes the app painfully slow.  I don't need a reload for every css / image / js asset that is fetched.</p>

<p><a href="https://github.com/guard/guard">Guard</a> to the rescue!  Guard is a
simple tool.  Watch files; run commands on change.  There is already a
<a href="https://github.com/guard/guard-pow">guard-pow</a> gem.  Which touches
<code>tmp/restart.txt</code> on file change.</p>

<p>To use it, add <code>guard-pow</code> to your Gemfile.  Then define a Guardfile
telling it which files to watch.  Your specific files may differ, but
this works for my needs.</p>

<p><div><script src='https://gist.github.com/1886987.js?file='></script>
<noscript><pre><code>guard 'pow' do
  watch('.rvmrc')
  watch('Gemfile')
  watch('Gemfile.lock')
  watch(%r{^lib/*/.*\.rb$})
  watch(%r{^app/*/.*\.rb$})
end
</code></pre></noscript></div>
</p>

<p>Finally, run <code>bundle exec guard</code>.  It will print when it restarts pow.
I like this approach because it can be adapted to any RACK compatible
app by changing which files get watched.  Also, it doesn't require you
to change any application specific code; It's only necessary to add
guard to the Gemfile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting your Emacs Config]]></title>
    <link href="http://rawsyntax.com/blog/troubleshooting-your-emacs-config/"/>
    <updated>2012-01-22T22:26:00-05:00</updated>
    <id>http://rawsyntax.com/blog/troubleshooting-your-emacs-config</id>
    <content type="html"><![CDATA[<p>Up to this point my <a href="/blog/categories/learn-emacs">Learn Emacs</a>
series has been all about how to do cool stuff in emacs.  One of my
personal favorites is <a href="/blog/learn-emacs-align-regexp/">align-regexp</a>.
A while back that stopped working for me.  Now I get an error: <code>Wrong type
argument: markerp, 0</code>.  Emacs doesn't always do what I mean.</p>

<!--more-->


<h3>First Remove your Config</h3>

<p>Whether you use a single <code>.emacs</code> file or a <code>~/.emacs.d/</code> directory
it is time to remove it.  Personally I keep <code>~/.emacs.d/</code> symlinked to
my <a href="https://github.com/rawsyntax/emacs.d">emacs.d github repo</a> so it iss
quite easy to remove the symlink.  Alternatively you can start emacs
with the <code>--no-init-file</code> option, to skip loading your files. The
rationale for removing your config is simply that it reduces the
number of variables you are dealing with.  Is the problem with your
config or with emacs itself?</p>

<h3>Then Check your Emacs Version</h3>

<p>After I removed my config and tried <code>M-x align-regexp</code> again, I got
the same error.  So its not my config.  If you find you have a problem
with a particular version of emacs <code>M-x emacs-version</code> will tell you
what version you have.  In my case it was</p>

<pre><code>GNU Emacs 24.0.92.1 (x86_64-apple-darwin, NS apple-appkit-1038.36) of 2011-12-02 on bob.porkrind.org
</code></pre>

<p>As I get my emacs builds from
<a href="http://emacsformacosx.com/">EmacsForMacOSX</a> or <code>brew install</code> them
myself.  At this point I'm fairly certain I'm getting the error as a
result of running a nightly build.  A quick google leads me to
<a href="http://lists.gnu.org/archive/html/bug-gnu-emacs/2011-12/msg00266.html">bug#10249: 24.0.92</a>.
I installed a pretest version, and align-regexp works fine like it
used to..  I would prefer to be running the stable version, but I'm using
<a href="https://github.com/technomancy/emacs-starter-kit">emacs-starter-kit</a>
for my config, which requires emacs 24.</p>

<h3>Version your Config</h3>

<p>When functionality like this breaks it is really awesome to have an
emacs configuration that is under version control.  I can walk
backwards through any recent changes to find what is causing breakage.
So if your config isn't already versioned, version it right now.</p>

<p>PS: I'm interested to know any emacs topics you'd like to see a
blogpost on.  I haven't been hacking my emacs config much lately, so
I'm short on ideas for emacs posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sometimes Side Projects Fail]]></title>
    <link href="http://rawsyntax.com/blog/sometimes-side-projects-fail/"/>
    <updated>2011-12-09T11:44:56-05:00</updated>
    <id>http://rawsyntax.com/blog/sometimes-side-projects-fail</id>
    <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/side-projects-fail.jpg" alt="Sometimes Side Projects Fail" class="center"/></p>

<p>I've worked on a few side projects over the years.  Sometimes they've
turned out well, and other times I stopped working on them.  How do
you know when it's time to throw in the towel and when it's time to
push through?</p>

<!--more-->


<p>Roughly a year ago a friend and I were working on a bill splitting
system.  It was supposed to solve the problem of splitting bills
between friends.  More specifically, splitting regularly occuring or
one time expenses between roommates.  Rather than worrying about
having cash, or writing a check and waiting for it to cash, we built a
system which piggybacked off of paypal's API to send bill and payment
notifications via email, which would generate a web checkout page
where the debt could be paid online through paypal.</p>

<p>See how long the previous sentence is?  Sounds too complicated already
and I'm the one who built it. The eventual idea was that we would wrap
this in a native client wrapper, so that if you're out to dinner with
your friends you don't have to worry about splitting the bill.  One
person will pick up the entire bill, split it and send bill
notifications via email to all the other people.  Then the others pull
out their phones and enter their paypal accounts and send payment for
their portion of the bill.  The bill can be settled on the spot.</p>

<h3>Not Every Idea is a Hit</h3>

<p>In a perfect world every side-project would be a hit that turns into
a business that generates lots of profit for little work.  In practice
this actually can be quite difficult to pull off.  Furthermore
sometimes those big hits aren't actually big hits when they start.  It
make take a couple of years of work to pull.  But how do you know if
your idea is taking a couple of years to get started or simply not
good at all?  Nobody wants to be a quitter, and worse nobody wants to
quit a good idea that ends up making someone else rich.  But there's
also more to life than money.</p>

<p>After working on this idea for a few hours a week for a couple months
we eventually decided to scrap it.  There really didn't seem to be a simple
way to make money with this idea.  It may have been a useful service,
but there are already similar free services out there for this.  Over
the years, I've grown to have an affinity for ideas that have
monetization strategies that are simple to understand.  In my
experience, the more complicated it is, the less the likelyhood of
actually making money.</p>

<p>Most importantly I wasn't particularly passionate about the idea, and
I didn't like the idea of piggybacking off of Paypal because of their
horrible customer service (I recently had my funds availability
delayed for 3 weeks with no explanation, and I've had an account for 7
years and an ebay account with perfect feedback).  But using another
online payment system made the idea less useful because other peer to
peer payment systems simply aren't as ubiquitous.</p>

<h3>Benefits of Side Projects</h3>

<p>Often the benefits are not monetary in nature.  In the case of this
bill splitting website, I used it at the time to keep up to date with
rails 3 and refresh my skills a little bit.  I was using Merb for most
projects at work at the time. Furthermore, working on small side
projects now and then keeps you familiar with how to start a project
from scratch and increases the breadth of your knowledge.  If its a
small project with just one person working on it, you have to be the
one to do everything (or at least hire the contractors that will do
the part outside your expertise, which is a skill in itself).</p>

<p>The most important thing is to simplify your idea.  Then build the
simplest thing that could possibly work.  Then keep at it and don't be
afraid to re-evaluate your idea.  It doesn't make you a quitter to throw out a project that no longer seems reasonable.</p>

<p>Check out an older post of mine about <a href="/blog/importance-of-side-projects/">side projects</a>.</p>
]]></content>
  </entry>
  
</feed>
