<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Raw Syntax]]></title>
  <link href="http://rawsyntax.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2011-11-30T22:29:57-05:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Blogging on Jekyll: URL Redirects]]></title>
    <link href="http://rawsyntax.com/blog/blogging-on-jekyll-url-redirects/"/>
    <updated>2011-11-29T14:32:00-05:00</updated>
    <id>http://rawsyntax.com/blog/blogging-on-jekyll-url-redirects</id>
    <content type="html"><![CDATA[<p>About a month ago I migrated my blog from Tumblr to Octopress hosted on github-pages.  I migrated because of Tumblr's slow page loads and frequent downtime.  I picked Octopress because it is built on top of Jekyll, and it comes with a reasonable default stylesheet.  Jekyll is a static site generator, which ensures I can deploy my blog on any old server in the future, and continue to use these same old tools (because I have them, rather than tumblr having them).</p>

<h3>Migrating broke my URL Structure</h3>

<p><img src="http://rawsyntax.com/images/urls_not_found.png" class ="center"/></p>

<p>Running my site through Google's Webmaster Tools showed that many sites are still linking to my old Tumblr blogpost urls.  Tumblr's url structure is another reason I migrated away from it.  I should be in full control of the urls on my blog.  Never the less, I need to support redirects from the old URLs to my new URL structure <code>/blog/:post_title</code>.</p>

<p>However Jekyll is just a static site, so there's no ruby server to handle redirects.  Other Jekyll users deploy to Heroku and use a small Sinatra app to handle redirects, but I feel like that is complicating my simple setup.  If I were on a regular server I could setup an <code>.htaccess</code> file to handle the redirects, but github-pages does not support <code>.htaccess</code>.</p>

<h3>Jekyll Plugins to the Rescue</h3>

<p>One of the great things about Jekyll is its simple plugin system.  On
<a href="https://github.com/mojombo/jekyll/wiki/Plugins">Jekyll's Wiki</a> I
found the
<a href="https://github.com/tsmango/jekyll_alias_generator">Alias Generator</a>.
It allows you to specify aliases on a per blogpost basis, in the YAML
front matter.</p>

<p>This post's YAML is:</p>

<pre><code>---
layout: post
title: "Blogging on Jekyll: URL Redirects"
date: 2011-11-29 14:32
comments: true
categories: ["programming", "blogging"]
alias: [/blog/blogging-on-redirects]
---
</code></pre>

<p>Now when I <code>rake generate</code> my site, the Alias Generator will create
another static html file for this post at
<code>/blog/blogging-on-redirects/index.html</code>:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html; charset=utf-8" /&gt;
&lt;meta http-equiv="refresh" content="0;url=/blog/blogging-on-jekyll-url-redirects/" /&gt;
&lt;/head&gt;
&lt;/html&gt;
</code></pre>

<p>Which will redirect here. Try it: <a href="/blog/blogging-on-redirects">/blog/blogging-on-redirects</a></p>

<p>It was almost that simple.  The Alias Generator actually broke when I
provided some of my old Tumblr urls. However, I
<a href="https://github.com/rawsyntax/jekyll_alias_generator">forked it here</a>
and fixed it so it handles nested aliases properly now.  I also opened
a <a href="https://github.com/tsmango/jekyll_alias_generator/pull/1">pull request</a> to the owner to get this change merged in.</p>

<h3>Jekyll's Strengths</h3>

<p>That experience is Jekyll's strength as a blogging platform.  The
output is so simple any web server can serve it so it doesn't matter
where you deploy to.  Its generation system is open source, hackable,
and has a great plugin system.</p>

<p>But most importantly, even if the Jekyll project implodes tomorrow.  I
still have all my blog's content versioned, and have all the tools
necessary to maintain my blog.  I am not relying on a hosted service
to back up my blog's content, or maintain the tools I edit it with.</p>

<h3>Try Octopress</h3>

<p>If you haven't tried <a href="http://octopress.org">Octopress</a> yet, I highly
recommend it.  It's Jekyll based, but it has a decent default
stylesheet, so it's very easy to install and immediately start
blogging.  No programming or tweaking CSS to get in the way of writing content.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving the General Case]]></title>
    <link href="http://rawsyntax.com/blog/solving-the-general-case/"/>
    <updated>2011-11-28T16:05:00-05:00</updated>
    <id>http://rawsyntax.com/blog/solving-the-general-case</id>
    <content type="html"><![CDATA[<p><a href="http://xkcd.com/974">
<img src="http://rawsyntax.com/images/the_general_problem.png" class ="center"/>
</a></p>

<p>This XKCD comic struck a chord with me.  I feel that it presents a
false dichotomy.  Either miss deadlines to design it right or go wild
west cowboy coding and meet deadlines.  I think there's a middle ground between
those options.  Design it correctly, but deliver less functionality,
and add the rest of the functionality at a later date.  While that's a
simple solution, this comic touches on other related issues.</p>

<h3>Analysis Paralysis</h3>

<p><img src="http://rawsyntax.com/images/analysis-paralysis.jpg" class ="center"/></p>

<p>This affliction is pretty common largely as a result of all the
choices we have nowadays when designing software.  Which language?
Which Framework? How about a
<a href="/blog/the-problem-with-micro-frameworks/">Micro-Framework</a>?  Which
<a href="/blog/categories/learn-emacs/">Text Editor</a>?  Nevermind questions
about how to actually solve the problem at hand.  If a simple flexible
design is not readily coming to mind, I find it helpful to write some
code that implements the very basics of the functionality needed, and
then re-evaluate to figure out a design.  Its a more iterative
approach.  Write a little code. Refactor.  Hopefully a good design
will emerge.  If not try something else.</p>

<h3>Deadline is not a Bad Word</h3>

<p>Growing up my dad would always tell me: "There is no time", but I
didn't understand what he meant until I got a job at 15 years old.
Deadlines are part of life, and furthermore they are not bad.  A
deadline is just a constraint.  Without deadlines we developers could
work on software design forever and never actually get to
implementation!  Deadlines can actually help cure analysis paralysis
by reducing the number of options available to us.  Rewriting the
whole project in python suddenly isn't an option.  Deadlines force
value judgements to be made.</p>

<h3>Why the General Case Takes so Long</h3>

<p>As you begin implementing your perfect design you may find holes.
This is one of the reasons for the shift from waterfall development to
agile (or even just shorter iterative processes).  Once your design is
implemented to 90% you are constrained with all these implementation
details.</p>

<p>To paraphrase Albert Einstein:
<blockquote><p>"At design-time, design and implementation are the same.  At implementation-time, they are not."</p></blockquote></p>

<p>The following quote is about ruby implementation, but it can be applied to any hard general case problem.</p>

<p><blockquote><p>Listen, people: Ruby is hard to implement. Oh, it may look easy at a glance, and you can probably get 70, 80, or even 90% of the way pretty quickly. But there's some crazy stuff in that last 10% or 5% that totally blindsides you if you're not looking for it. An early Ruby implementation has not run that last mile of Ruby implementation, and it takes almost as much work to get there as it does to run the first 90%.</p><footer><strong>Charles Nutter</strong><cite><a href='http://blog.headius.com/2009/03/on-benchmarking.html'>blog.headius.com/2009/03/&hellip;</a></cite></footer></blockquote></p>

<p>When he talks about getting blindsided by that last 10%, that is
potentially a missed deadline.</p>

<h3>Solving the Problem of Solving the General Case</h3>

<p>  Ask yourself if you can live with a 90% solution.  Do you really need to solve the general case?  If 90% is not enough, break the general
case down into many smaller pieces of functionality and many smaller
deadlines.  You may still run into missed deadlines and problems, but
they will have smaller and more predictable impact.  This doesn't
really solve the overall problem of software that takes too long to
develop, but it makes the problems easier to manage.</p>
]]></content>
  </entry>
  
</feed>
