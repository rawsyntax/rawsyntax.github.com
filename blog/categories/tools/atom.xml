<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tools | Raw Syntax]]></title>
  <link href="http://rawsyntax.com/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2012-10-11T17:00:26-04:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Measuring Slow Code]]></title>
    <link href="http://rawsyntax.com/blog/measuring-slow-code/"/>
    <updated>2012-09-02T15:59:00-04:00</updated>
    <id>http://rawsyntax.com/blog/measuring-slow-code</id>
    <content type="html"><![CDATA[<p>Over the years I've found myself needing a quick way to measure some
slow code.  Whether I'm looking at a 100 line function or a 10 line
controller action, sometimes I just need some quick print statements
to determine which part of the code is slow.</p>

<p>My original approach to doing this would be to mark off sections of
the code with <code>Time.now</code> statements printing out how many seconds each
section took.  This approach is messy because it requires altering the
code a good deal.  And at the end I was left comparing sections of the
code to figure out which part was slower than all the other parts --
doing the math in my head.</p>

<h2>Use Benchmark?</h2>

<p>Ruby has a
<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a>
class built in.  I tried using it.  While it can be helpful in certain
situations, if I'm measuring 5 sections of a function there's an awful
lot of code rewriting that has to happen because of the Benchmark
blocks messing with the scope of variables.  That was more work than
it was worth.</p>

<h2>Roll my Own</h2>

<p>I'm hesitant to reinvent the wheel, but in this case I created a very
simple gem to address my needs.  It's called
<a href="https://github.com/rawsyntax/code_timer">CodeTimer</a>.  To use it first
you instantiate it:</p>

<p><code>ruby
ct = CodeTimer.new
</code></p>

<p>Then you insert markers for each part that you want to measure:</p>

<p>``` ruby
ct.start("Part1")</p>

<h1>... slow code here ...</h1>

<p>ct.start("Part2")</p>

<h1>...</h1>

<p>```</p>

<p>And a marker for stopping measuring:</p>

<p><code>ruby
ct.end
</code></p>

<p>It returns a formatted string:</p>

<pre><code>Total Time: 17s
Part1:   11% / 2s
Part2:   29% / 5s
Part3:   47% / 8s
Part4:   11% / 2s
</code></pre>

<p>And it's easy to see that Part3 is the slowest section.  Better start
trying to speed up the code there.</p>

<h2>What If This Doesn't Work?</h2>

<p>This isn't the solution for every slow code problem.  If this approach
doesn't yield meaningful results you will have to use a more serious
tool.  However, I reach for this tool first because it's the simplest
thing that could possibly work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Faster SSH Connections]]></title>
    <link href="http://rawsyntax.com/blog/faster-ssh-connections/"/>
    <updated>2012-07-11T12:34:00-04:00</updated>
    <id>http://rawsyntax.com/blog/faster-ssh-connections</id>
    <content type="html"><![CDATA[<p>Certain servers I connect to on a regular basis are rather slow when
connecting.  Here are some <code>~/.ssh/config</code> options to speed up ssh connections.</p>

<p>I find this is useful for scripts that make multiple subsequent ssh
connections.  Capistrano comes to mind as well as a couple of scripts
I have that use scp.</p>

<p><div><script src='https://gist.github.com/3091626.js?file='></script>
<noscript><pre><code>Host *
    # don't try to authenticate with Kerberos
    GSSAPIAuthentication no
    GSSAPIKeyExchange no
    # persist the ssh connection for 5 minutes
    # subsequent ssh connections respond faster because its reusing an existing connection
    ControlMaster auto
    ControlPath ~/.ssh/master-%r@%h:%p
    ControlPersist 5m</code></pre></noscript></div>
</p>

<p>EDIT:  I have noticed occasionally that I get some error messages due
to stale master connections.  I think this happens when my computer
powers off without shutting down fully.</p>

<pre><code>Control socket connect(/Users/eric/.ssh/master-user@example.com:22): Connection refused
ControlSocket /Users/eric/.ssh/master-user@example.com:22 already exists, disabling multiplexing
</code></pre>

<p>The connection still works, but it is even slower to connect which
defeats the purpose of using master control sockets.  You can go into
<code>~/.ssh</code> and manually remove the connection files to clean it up.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS X Lion New Tab in Terminal Changes Directory]]></title>
    <link href="http://rawsyntax.com/blog/os-x-lion-new-tab-in-terminal-changes-directory/"/>
    <updated>2011-10-25T00:00:00-04:00</updated>
    <id>http://rawsyntax.com/blog/os-x-lion-new-tab-in-terminal-changes-directory</id>
    <content type="html"><![CDATA[<p>In 10.6 when you opened a new tab in Terminal.app it opened to your home directory. In 10.7 a new tab in Terminal.app opens to your current working directory (from any previous tabs). I found this feature to be annoying, as I already have a command that will do it when I want it, and I prefer the old 10.6 behavior.</p>

<p>Luckily, this is a preference in Terminal.app and can be easily changed.</p>

<p><img src="http://media.tumblr.com/tumblr_ltmvs87NgE1qfdxjm.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Bash: Remove Commands from your History]]></title>
    <link href="http://rawsyntax.com/blog/learn-bash-remove-commands-from-your-history/"/>
    <updated>2011-08-11T00:00:00-04:00</updated>
    <id>http://rawsyntax.com/blog/learn-bash-remove-commands-from-your-history</id>
    <content type="html"><![CDATA[<p>Occasionally I type a password or other sensitive information into a shell
prompt. Using bash history, the command can be removed.</p>

<!--more-->


<p><div><script src='https://gist.github.com/1330991.js?file='></script>
<noscript><pre><code># say we start with an empty bash command history
bash-3.2$ history
    1  history


# enter a command that requires a password
bash-3.2$ sudo rm -i some_file
Password:
# accidentally ^C and type your password
# into the prompt and hit enter
bash-3.2$ secret_password
bash: secret_password: command not found


# your password is now there for all to
# see in your bash history
bash-3.2$ history
    1  history
    2  sudo rm -i some_file
    3  secret_password
    4  history


# first option to fix it, delete the numbered entry from
# history and write to your ~/.bash_history file
bash-3.2$ history -d 3
bash-3.2$ history -w


# entry 3 will be removed entirely from your command history
bash-3.2$ history
    1  history
    2  sudo rm -i some_file
    3  history
    4  history -d 3
    5  history -w
    6  history


# the second option is to clear the entire history
# and write the changes to disk
bash-3.2$ history -c
bash-3.2$ history -w


# it's now pretty obvious that your history has been
# scrubbed clean, but at least your password is history!
bash-3.2$ history
    1  history -w
    2  history</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quicksilver Lockscreen]]></title>
    <link href="http://rawsyntax.com/blog/quicksilver-lockscreen/"/>
    <updated>2011-04-13T00:00:00-04:00</updated>
    <id>http://rawsyntax.com/blog/quicksilver-lockscreen</id>
    <content type="html"><![CDATA[<p><img src="/images/quicksilver-lockscreen.png"></p>

<p>I've recently started locking my screen on OSX. However I found that <a href="http://qsapp.com">Quicksilver's</a> LockScreen script did not work. I believe it was designed for Leopard.</p>

<p>The workaround I've found is to start ScreenSaverEngine with Quicksilver, and set my Security.prefs to require a password.</p>

<p>UPDATE: This also works in OSX Lion.</p>
]]></content>
  </entry>
  
</feed>
