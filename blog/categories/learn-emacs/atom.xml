<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learn-emacs | Raw Syntax]]></title>
  <link href="http://rawsyntax.com/blog/categories/learn-emacs/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2012-05-31T18:04:37-04:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn Emacs: Editing Javascript]]></title>
    <link href="http://rawsyntax.com/blog/learn-emacs-editing-javascript/"/>
    <updated>2012-05-31T17:07:00-04:00</updated>
    <id>http://rawsyntax.com/blog/learn-emacs-editing-javascript</id>
    <content type="html"><![CDATA[<p>One of my favorite things about emacs is its javascript modes.  While
there are a million options, I'm only going to talk about how I edit
javascript with emacs.</p>

<h2>Which Mode do I Use?</h2>

<p>I use <a href="http://code.google.com/p/js2-mode/">js2-mode</a>.  It provides
syntax highlighting and underlines errors as you type.  This mode
doesn't come with emacs, it was built by Steve Yegge.  However it is
installable through the ELPA.</p>

<p>One problem I found with this mode is that it has some weird ideas
about indentation.  I personally prefer the indentation from the
built-in <code>js-mode</code> in emacs.  After some googling I came across a
<a href="http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode">blogpost</a>
on fixing indentation in <code>js2-mode</code>.  Starting with that I then made my
own modifications and have a <code>js2-mode</code> that works exactly the way I
want it (code below).</p>

<p><div><script src='https://gist.github.com/2846385.js?file='></script>
<noscript><pre><code>(add-to-list 'auto-mode-alist '(&quot;\\.js$&quot; . js2-mode))
(add-to-list 'auto-mode-alist '(&quot;\\.json$&quot; . js2-mode))


;; Use js-mode indentation in js2-mode, I don't like js2-mode's indentation
;;
;; thanks http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
;; with my own modifications
;;
(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (js--proper-indentation parse-status))
           node)

      (save-excursion

        (back-to-indentation)
        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = &quot;bar&quot;,
        ;;     bar = &quot;foo&quot;;
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation ( 4 indentation))))

      (indent-line-to indentation)
      (when (&gt; offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (&lt; (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the &quot;buffer
          ;; modified&quot; property for nothing
          (beginning-of-line)
          (unless (looking-at &quot;\\s-*$&quot;)
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'js)
  (setq js-indent-level 2
        indent-tabs-mode nil
        c-basic-offset 2)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map [(meta control \;)] 
    '(lambda()
       (interactive)
       (insert &quot;/* -----[ &quot;)
       (save-excursion
         (insert &quot; ]----- */&quot;))
       ))
  (define-key js2-mode-map [(return)] 'newline-and-indent)
  (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map [(control meta q)] 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
    (js2-highlight-vars-mode))
  (message &quot;My JS2 hook&quot;))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

</code></pre></noscript></div>
</p>

<h2>Editing Javascript in HTML</h2>

<p>In my experience I'm not always editing pure <code>.js</code> files.  Sometimes
I'm editing javascript inside a <code>.haml</code>, <code>.erb</code>, or <code>.html</code> file.  The
<code>haml-mode</code> I am using is supposed to have easy <code>js-mode</code> integration.
However I tried to integrate <code>js2-mode</code>, and it was not simple.
Furthermore, the built-in javascript highlighting seems to break on a
regular basis.  Troubleshooting that problem looked like it was going
to take more time than I had. Instead I wrote some elisp to allow me
to quickly create a javascript scratch buffer.</p>

<h2>Javascript Scratch Buffer</h2>

<p>I use this to write javascript and copy / paste between buffers until
I'm happy with the code.  It's a very simple solution to the problem.
It creates a buffer named scratch-js with <code>js2-mode</code>.  It's not unlike
the elisp scratch buffer that comes up on emacs start up.  I don't
write javascript all the time, so this solution works pretty well for me.</p>

<p><div><script src='https://gist.github.com/2846414.js?file='></script>
<noscript><pre><code>(defun scratch-js ()
  &quot;Create or switch to a javascript mode scratch buffer&quot;
  (interactive)

  (if (not (eq nil (get-buffer &quot;scratch-js&quot;)))
      (switch-to-buffer &quot;scratch-js&quot;)
    (set-buffer (get-buffer-create &quot;scratch-js&quot;))
    (js2-mode)
    (switch-to-buffer &quot;scratch-js&quot;)))</code></pre></noscript></div>
</p>

<p>This is admittedly a stopgap solution.  I would prefer to have
<code>js2-mode</code> integrated tightly with <code>haml-mode</code>.  If anyone else has
actually done this, I would love to see the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Emacs: How to Break Bad Habits]]></title>
    <link href="http://rawsyntax.com/blog/learn-emacs-how-to-break-bad-habits/"/>
    <updated>2012-02-14T10:10:00-05:00</updated>
    <id>http://rawsyntax.com/blog/learn-emacs-how-to-break-bad-habits</id>
    <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/arrow-keys.jpg" class ="center"/></p>

<p>The best thing to do is never to form bad habits in the first place.
However if you didn't have any bad habits, you wouldn't be reading
this blog post.  Here's what has worked for me.</p>

<h3>Make a Note of It</h3>

<p>One of my bad habits was using the arrow keys for navigation in emacs.
It's inefficient.  Emacs already has keybindings for next / previous
and back / forward -- and I don't have to pick up my hands for those.
The first thing I did was start keeping a short list of bad emacs
habits.</p>

<p>Don't think about fixing every bad habit immediately.  Just note them
and move on with real work.  These also don't have to be bad habits
per say.  They can be inefficiencies as well.  Is there a better way to
do that thing you do all the time, but you've been putting off putting
in the time to build it?</p>

<h3>Fix One Bad Habit</h3>

<p>After years of using the arrow keys in emacs, I decided it was time
for that to stop.  Because my emacs config is versioned.  I can see
that I decided to stop on <code>Fri Sep 16 10:53:49 2011 -0400</code>.  Work on
fixing this one habit until its completely fixed.  My fix was pretty
simple.</p>

<p><div><script src='https://gist.github.com/1794878.js?file='></script>
<noscript><pre><code>commit 11dce2502c111ff9ae73f95dde89f27d0f84416a
Author: Eric Himmelreich &lt;eric@rawsyntax.com&gt;
Date:   Fri Sep 16 10:53:49 2011 -0400

    break arrow keys habit, I already know the emacs bindings for moving

	Modified   eric/bindings.el
diff --git a/eric/bindings.el b/eric/bindings.el
index 9915c7e..bb9d4fc 100644
--- a/eric/bindings.el
+++ b/eric/bindings.el
@@ -8,3 +8,9 @@
 
 (global-set-key (kbd &quot;C-w&quot;) 'backward-kill-word)
 (global-set-key (kbd &quot;C-x C-k&quot;) 'kill-region)
+
+;; stop using the arrow keys
+(global-unset-key [left])
+(global-unset-key [up])
+(global-unset-key [right])
+(global-unset-key [down])

[back] 
</code></pre></noscript></div>
</p>

<p>Unbind the arrow keys and it becomes pretty tough to use them.  I
don't use the arrow keys any more.  Maybe your fix is more complicated.
Maybe it's writing an emacs macro for something you do frequently.</p>

<h3>Schedule Time for This</h3>

<p>Its a bad idea to try to fix emacs problems while on a tight deadline
for a project.  However you will find yourself with a spare 30 minutes
or an hour here and there.  Make that your emacs improvement time.</p>

<p>Almost a year ago I found myself with an ever growing emacs problem.
My config files had grown out of control.  They were a huge mess and
impossible to manage.  Even though I was using version control my
config still had lots of local changes and files that weren't tracked
at all.  And my github repo was never up to date. I was in need of a
fresh emacs config.  I needed organization and simplicity.</p>

<p>When would I ever have time to rewrite my entire emacs config?</p>

<p>I started making time on <code>Tue Jun 21 18:18:41 2011 -0400</code> as I had read
about <code>emacs-starter-kit (v2)</code>.  Its basis was emacs-24 paired with
the marmalade-repo (for emacs-lisp packages).  I put in an n hour here
and there over the course of a few months.  In mid September it was good
enough to use as my full-time working config.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Emacs: Swap Windows]]></title>
    <link href="http://rawsyntax.com/blog/learn-emacs-swap-windows/"/>
    <updated>2012-01-26T10:33:00-05:00</updated>
    <id>http://rawsyntax.com/blog/learn-emacs-swap-windows</id>
    <content type="html"><![CDATA[<p>When I use Emacs in GUI mode, I set it up to have two 80 column
windows side by side.  It's extremely convention when you need to look
at one section of the code while writing another.  For instance, you
can have the spec file side by side with the code when doing TDD.
Sometimes I want to swap the windows.  This kind of functionality does
not come built in with emacs.  I found the <code>swap-windows</code> function
that I use in Steve Yegge's
<a href="https://sites.google.com/site/steveyegge2/my-dot-emacs-file">.emacs</a>
file.</p>

<p><div><script src='https://gist.github.com/1683375.js?file='></script>
<noscript><pre><code>(defun swap-windows ()
 &quot;If you have 2 windows, it swaps them.&quot;
 (interactive)
 (cond ((not (= (count-windows) 2))
        (message &quot;You need exactly 2 windows to do this.&quot;))
       (t
        (let* ((w1 (first (window-list)))
               (w2 (second (window-list)))
               (b1 (window-buffer w1))
               (b2 (window-buffer w2))
               (s1 (window-start w1))
               (s2 (window-start w2)))
          (set-window-buffer w1 b2)
          (set-window-buffer w2 b1)
          (set-window-start w1 s2)
          (set-window-start w2 s1)))))</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting your Emacs Config]]></title>
    <link href="http://rawsyntax.com/blog/troubleshooting-your-emacs-config/"/>
    <updated>2012-01-22T22:26:00-05:00</updated>
    <id>http://rawsyntax.com/blog/troubleshooting-your-emacs-config</id>
    <content type="html"><![CDATA[<p>Up to this point my <a href="/blog/categories/learn-emacs">Learn Emacs</a>
series has been all about how to do cool stuff in emacs.  One of my
personal favorites is <a href="/blog/learn-emacs-align-regexp/">align-regexp</a>.
A while back that stopped working for me.  Now I get an error: <code>Wrong type
argument: markerp, 0</code>.  Emacs doesn't always do what I mean.</p>

<h3>First Remove your Config</h3>

<p>Whether you use a single <code>.emacs</code> file or a <code>~/.emacs.d/</code> directory
it is time to remove it.  Personally I keep <code>~/.emacs.d/</code> symlinked to
my <a href="https://github.com/rawsyntax/emacs.d">emacs.d github repo</a> so it iss
quite easy to remove the symlink.  Alternatively you can start emacs
with the <code>--no-init-file</code> option, to skip loading your files. The
rationale for removing your config is simply that it reduces the
number of variables you are dealing with.  Is the problem with your
config or with emacs itself?</p>

<h3>Then Check your Emacs Version</h3>

<p>After I removed my config and tried <code>M-x align-regexp</code> again, I got
the same error.  So its not my config.  If you find you have a problem
with a particular version of emacs <code>M-x emacs-version</code> will tell you
what version you have.  In my case it was</p>

<pre><code>GNU Emacs 24.0.92.1 (x86_64-apple-darwin, NS apple-appkit-1038.36) of 2011-12-02 on bob.porkrind.org
</code></pre>

<p>As I get my emacs builds from
<a href="http://emacsformacosx.com/">EmacsForMacOSX</a> or <code>brew install</code> them
myself.  At this point I'm fairly certain I'm getting the error as a
result of running a nightly build.  A quick google leads me to
<a href="http://lists.gnu.org/archive/html/bug-gnu-emacs/2011-12/msg00266.html">bug#10249: 24.0.92</a>.
I installed a pretest version, and align-regexp works fine like it
used to..  I would prefer to be running the stable version, but I'm using
<a href="https://github.com/technomancy/emacs-starter-kit">emacs-starter-kit</a>
for my config, which requires emacs 24.</p>

<h3>Version your Config</h3>

<p>When functionality like this breaks it is really awesome to have an
emacs configuration that is under version control.  I can walk
backwards through any recent changes to find what is causing breakage.
So if your config isn't already versioned, version it right now.</p>

<p>PS: I'm interested to know any emacs topics you'd like to see a
blogpost on.  I haven't been hacking my emacs config much lately, so
I'm short on ideas for emacs posts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Emacs: Useful Links]]></title>
    <link href="http://rawsyntax.com/blog/learn-emacs-useful-links/"/>
    <updated>2011-11-08T23:02:00-05:00</updated>
    <id>http://rawsyntax.com/blog/learn-emacs-useful-links</id>
    <content type="html"><![CDATA[<p>I have a running series of blog posts on
<a href="/blog/categories/learn-emacs/">learning emacs</a>.  It is a life-long
endeavor.  In this post I'm going to share some of the emacs resources
that I have come across over the years.</p>

<h3><a href="http://www.emacswiki.org/">EmacsWiki</a></h3>

<p>This is the definitive source for emacs information (aside from the emacs manual).  There's a ton of information there, some of it is outdated, but it's still worth your time.</p>

<h3>Steve Yegge's Emacs Posts -- <a href="https://sites.google.com/site/steveyegge2/blog-rants">old blog</a> and <a href="http://steve-yegge.blogspot.com/search?q=emacs">new blog</a></h3>

<p>All I can say is that Steve Yegge has written a lot about emacs, and has made some awesome elisp contributions.  I'm a huge fan of js2-mode.  Just do a search for emacs on his old and new blogs. <a href="https://sites.google.com/site/steveyegge2/effective-emacs">Effective Emacs</a>
is a good post to start with.</p>

<h3><a href="http://avdi.org/devblog/category/emacs-reboot/">Avdi Grimm's Emacs Reboot</a></h3>

<p>Avdi Grimm is writing about re-doing his emacs config from scratch.
It's very informative and super easy to follow.  I've used some ideas
from his posts.  His <a href="https://github.com/avdi/.emacs24.d">emacs config is on github</a>.</p>

<h3><a href="http://emacsrookie.com/">emacsrookie</a></h3>

<p>This site is relatively new, and there are only a few posts on it
right now, but it is quality emacs content.</p>

<h3><a href="http://emacsrocks.com/">emacsrocks</a></h3>

<p>Emacs screencasts.  It's another new site, but I can't argue with free content.</p>

<h3><a href="http://emacsformacosx.com/">EmacsForMacOSX</a></h3>

<p>This site is very convenient for getting the latest os x builds of
emacs.  Or you can run the build-script yourself
(<a href="https://github.com/caldwell/build-emacs">source on github</a>).</p>

<h3><a href="https://github.com/search?&amp;q=emacs&amp;type=Everything&amp;repo=&amp;langOverride=&amp;start_value=1">Github</a></h3>

<p>Search emacs on github.  You will find many other emacs users' configs
hosted there.  Read their configs, and you will learn emacs.  I keep
<a href="https://github.com/rawsyntax/emacs.d">my emacs config there</a>.</p>

<p>Did I miss any useful emacs resources?</p>

<p>UPDATE:  The users at <a href="http://reddit.com/r/emacs/">emacs reddit</a> let
me know I forgot a big one.  Check out <a href="http://emacs-fu.blogspot.com">emacs-fu</a></p>
]]></content>
  </entry>
  
</feed>
