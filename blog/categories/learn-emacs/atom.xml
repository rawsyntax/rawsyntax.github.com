<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learn-emacs | Raw Syntax]]></title>
  <link href="http://rawsyntax.com/blog/categories/learn-emacs/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2013-02-23T18:05:30-05:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learn Emacs: Fit your Workflow]]></title>
    <link href="http://rawsyntax.com/blog/learn-emacs-fit-your-workflow/"/>
    <updated>2013-02-23T17:02:00-05:00</updated>
    <id>http://rawsyntax.com/blog/learn-emacs-fit-your-workflow</id>
    <content type="html"><![CDATA[<p><div class="embed video YouTube"><iframe width="480" height="270" src="http://www.youtube.com/embed/nQ0Q_6HZwwY?feature=oembed" frameborder="0" allowfullscreen></iframe></div></p>

<p>The visor I refer to is a feature of <a href="http://totalterminal.binaryage.com/">TotalTerminal</a>.</p>

<p>The elisp code is below:</p>

<p><div><script src='https://gist.github.com/5021575.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>

<div><script src='https://gist.github.com/5021581.js?file='></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 24.1 is Out]]></title>
    <link href="http://rawsyntax.com/blog/emacs-24-dot-1-is-out/"/>
    <updated>2012-06-11T16:55:00-04:00</updated>
    <id>http://rawsyntax.com/blog/emacs-24-dot-1-is-out</id>
    <content type="html"><![CDATA[<p>Emacs 24.1 was
<a href="http://lists.gnu.org/archive/html/emacs-devel/2012-06/msg00164.html">released</a>
yesterday.</p>

<p>Being the first release version of Emacs 24, I'd suggest trying it
out.  I've been using Emacs 24 since the pretest version started
coming out, and even the recent pretests have been stable for me.</p>

<!--more-->


<h2>Some New Features</h2>

<p>My favorite feature of Emacs 24 is the elisp package manager.  I find
its an extremely convenient way to manage the packages you want your
<code>~/.emacs.d</code> to utilize. It's available via <code>M-x list-packages</code>.  The
canonical package manager is known as the
<a href="http://tromey.com/elpa/">ELPA</a>, but there are other package
managers, such as <a href="http://marmalade-repo.org/">marmalade</a> because the
ELPA doesn't include everything.</p>

<p>Getting the package manager setup is easy.  Here's the minimal code
needed:</p>

<p><div><script src='https://gist.github.com/2912673.js?file='></script>
<noscript><pre><code>(require 'package)

;; optionally add the marmalade repo to list-packages
(add-to-list 'package-archives
	     '(&quot;marmalade&quot; . &quot;http://marmalade-repo.org/packages/&quot;))

(package-initialize)
(package-refresh-contents)</code></pre></noscript></div>
</p>

<p>Another new feature is the built-in color-theme facility.  Prior to
Emacs 24 color themes could be created through the
<a href="http://www.emacswiki.org/cgi-bin/wiki?ColorTheme">color-theme</a>
package.  Instead you can now use <code>customize-create-theme</code> to create
color-themes.</p>

<p><img src="http://rawsyntax.com/images/customize-create-theme.jpg" class ="center"/></p>

<p>There's too much to cover in a blogpost, but here's the entire
<a href="https://www.gnu.org/software/emacs/NEWS.24.1">NEWS file</a>, which you
can also view inside emacs with  <code>M-x view-emacs-news</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Emacs: Smex]]></title>
    <link href="http://rawsyntax.com/blog/learn-emacs-smex/"/>
    <updated>2012-06-06T12:24:00-04:00</updated>
    <id>http://rawsyntax.com/blog/learn-emacs-smex</id>
    <content type="html"><![CDATA[<p>Scroll down for code snippets and text.</p>

<p><div class="embed video YouTube"><iframe width="459" height="344" src="http://www.youtube.com/embed/18u_ieDpr1o?feature=oembed" frameborder="0" allowfullscreen></iframe></div></p>

<p>Smex is IDO style completion for M-x.  It is very customizable.  I
recommend taking a look at the README for all the available options.
Here's the minimum setup required.
<div><script src='https://gist.github.com/2883010.js?file='></script>
<noscript><pre><code>(require 'smex)
(smex-initialize)

(global-set-key (kbd &quot;M-x&quot;) 'smex)
(global-set-key (kbd &quot;M-X&quot;) 'smex-major-mode-commands)
(global-set-key (kbd &quot;C-c M-x&quot;) 'smex-update)
(global-set-key (kbd &quot;C-c C-c M-x&quot;) 'execute-extended-command)</code></pre></noscript></div>
</p>

<p>It's available on the ELPA and the source is on github.</p>

<p><a href="https://github.com/nonsequitur/smex/">Smex source on github</a><br />
<a href="http://marmalade-repo.org/packages/smex">available on marmalade repo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Emacs: Editing Javascript]]></title>
    <link href="http://rawsyntax.com/blog/learn-emacs-editing-javascript/"/>
    <updated>2012-05-31T17:07:00-04:00</updated>
    <id>http://rawsyntax.com/blog/learn-emacs-editing-javascript</id>
    <content type="html"><![CDATA[<p>One of my favorite things about emacs is its javascript modes.  While
there are a million options, I'm only going to talk about how I edit
javascript with emacs.</p>

<!--more-->


<h2>Which Mode do I Use?</h2>

<p>I use <a href="http://code.google.com/p/js2-mode/">js2-mode</a>.  It provides
syntax highlighting and underlines errors as you type.  This mode
doesn't come with emacs, it was built by Steve Yegge.  However it is
installable through the ELPA.</p>

<p>One problem I found with this mode is that it has some weird ideas
about indentation.  I personally prefer the indentation from the
built-in <code>js-mode</code> in emacs.  After some googling I came across a
<a href="http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode">blogpost</a>
on fixing indentation in <code>js2-mode</code>.  Starting with that I then made my
own modifications and have a <code>js2-mode</code> that works exactly the way I
want it (code below).</p>

<p><div><script src='https://gist.github.com/2846385.js?file='></script>
<noscript><pre><code>(add-to-list 'auto-mode-alist '(&quot;\\.js$&quot; . js2-mode))
(add-to-list 'auto-mode-alist '(&quot;\\.json$&quot; . js2-mode))


;; Use js-mode indentation in js2-mode, I don't like js2-mode's indentation
;;
;; thanks http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode
;; with my own modifications
;;
(defun my-js2-indent-function ()
  (interactive)
  (save-restriction
    (widen)
    (let* ((inhibit-point-motion-hooks t)
           (parse-status (save-excursion (syntax-ppss (point-at-bol))))
           (offset (- (current-column) (current-indentation)))
           (indentation (js--proper-indentation parse-status))
           node)

      (save-excursion

        (back-to-indentation)
        ;; consecutive declarations in a var statement are nice if
        ;; properly aligned, i.e:
        ;;
        ;; var foo = &quot;bar&quot;,
        ;;     bar = &quot;foo&quot;;
        (setq node (js2-node-at-point))
        (when (and node
                   (= js2-NAME (js2-node-type node))
                   (= js2-VAR (js2-node-type (js2-node-parent node))))
          (setq indentation ( 4 indentation))))

      (indent-line-to indentation)
      (when (&gt; offset 0) (forward-char offset)))))

(defun my-indent-sexp ()
  (interactive)
  (save-restriction
    (save-excursion
      (widen)
      (let* ((inhibit-point-motion-hooks t)
             (parse-status (syntax-ppss (point)))
             (beg (nth 1 parse-status))
             (end-marker (make-marker))
             (end (progn (goto-char beg) (forward-list) (point)))
             (ovl (make-overlay beg end)))
        (set-marker end-marker end)
        (overlay-put ovl 'face 'highlight)
        (goto-char beg)
        (while (&lt; (point) (marker-position end-marker))
          ;; don't reindent blank lines so we don't set the &quot;buffer
          ;; modified&quot; property for nothing
          (beginning-of-line)
          (unless (looking-at &quot;\\s-*$&quot;)
            (indent-according-to-mode))
          (forward-line))
        (run-with-timer 0.5 nil '(lambda(ovl)
                                   (delete-overlay ovl)) ovl)))))

(defun my-js2-mode-hook ()
  (require 'js)
  (setq js-indent-level 2
        indent-tabs-mode nil
        c-basic-offset 2)
  (c-toggle-auto-state 0)
  (c-toggle-hungry-state 1)
  (set (make-local-variable 'indent-line-function) 'my-js2-indent-function)
  (define-key js2-mode-map [(meta control |)] 'cperl-lineup)
  (define-key js2-mode-map [(meta control \;)] 
    '(lambda()
       (interactive)
       (insert &quot;/* -----[ &quot;)
       (save-excursion
         (insert &quot; ]----- */&quot;))
       ))
  (define-key js2-mode-map [(return)] 'newline-and-indent)
  (define-key js2-mode-map [(backspace)] 'c-electric-backspace)
  (define-key js2-mode-map [(control d)] 'c-electric-delete-forward)
  (define-key js2-mode-map [(control meta q)] 'my-indent-sexp)
  (if (featurep 'js2-highlight-vars)
    (js2-highlight-vars-mode))
  (message &quot;My JS2 hook&quot;))

(add-hook 'js2-mode-hook 'my-js2-mode-hook)

</code></pre></noscript></div>
</p>

<h2>Editing Javascript in HTML</h2>

<p>In my experience I'm not always editing pure <code>.js</code> files.  Sometimes
I'm editing javascript inside a <code>.haml</code>, <code>.erb</code>, or <code>.html</code> file.  The
<code>haml-mode</code> I am using is supposed to have easy <code>js-mode</code> integration.
However I tried to integrate <code>js2-mode</code>, and it was not simple.
Furthermore, the built-in javascript highlighting seems to break on a
regular basis.  Troubleshooting that problem looked like it was going
to take more time than I had. Instead I wrote some elisp to allow me
to quickly create a javascript scratch buffer.</p>

<h2>Javascript Scratch Buffer</h2>

<p>I use this to write javascript and copy / paste between buffers until
I'm happy with the code.  It's a very simple solution to the problem.
It creates a buffer named scratch-js with <code>js2-mode</code>.  It's not unlike
the elisp scratch buffer that comes up on emacs start up.  I don't
write javascript all the time, so this solution works pretty well for me.</p>

<p><div><script src='https://gist.github.com/2846414.js?file='></script>
<noscript><pre><code>(defun scratch-js ()
  &quot;Create or switch to a javascript mode scratch buffer&quot;
  (interactive)

  (if (not (eq nil (get-buffer &quot;scratch-js&quot;)))
      (switch-to-buffer &quot;scratch-js&quot;)
    (set-buffer (get-buffer-create &quot;scratch-js&quot;))
    (js2-mode)
    (switch-to-buffer &quot;scratch-js&quot;)))</code></pre></noscript></div>
</p>

<p>This is admittedly a stopgap solution.  I would prefer to have
<code>js2-mode</code> integrated tightly with <code>haml-mode</code>.  If anyone else has
actually done this, I would love to see the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learn Emacs: How to Break Bad Habits]]></title>
    <link href="http://rawsyntax.com/blog/learn-emacs-how-to-break-bad-habits/"/>
    <updated>2012-02-14T10:10:00-05:00</updated>
    <id>http://rawsyntax.com/blog/learn-emacs-how-to-break-bad-habits</id>
    <content type="html"><![CDATA[<p><img src="http://rawsyntax.com/images/arrow-keys.jpg" class ="center"/></p>

<p>The best thing to do is never to form bad habits in the first place.
However if you didn't have any bad habits, you wouldn't be reading
this blog post.  Here's what has worked for me.</p>

<!--more-->


<h3>Make a Note of It</h3>

<p>One of my bad habits was using the arrow keys for navigation in emacs.
It's inefficient.  Emacs already has keybindings for next / previous
and back / forward -- and I don't have to pick up my hands for those.
The first thing I did was start keeping a short list of bad emacs
habits.</p>

<p>Don't think about fixing every bad habit immediately.  Just note them
and move on with real work.  These also don't have to be bad habits
per say.  They can be inefficiencies as well.  Is there a better way to
do that thing you do all the time, but you've been putting off putting
in the time to build it?</p>

<h3>Fix One Bad Habit</h3>

<p>After years of using the arrow keys in emacs, I decided it was time
for that to stop.  Because my emacs config is versioned.  I can see
that I decided to stop on <code>Fri Sep 16 10:53:49 2011 -0400</code>.  Work on
fixing this one habit until its completely fixed.  My fix was pretty
simple.</p>

<p><div><script src='https://gist.github.com/1794878.js?file='></script>
<noscript><pre><code>commit 11dce2502c111ff9ae73f95dde89f27d0f84416a
Author: Eric Himmelreich &lt;eric@rawsyntax.com&gt;
Date:   Fri Sep 16 10:53:49 2011 -0400

    break arrow keys habit, I already know the emacs bindings for moving

	Modified   eric/bindings.el
diff --git a/eric/bindings.el b/eric/bindings.el
index 9915c7e..bb9d4fc 100644
--- a/eric/bindings.el
+++ b/eric/bindings.el
@@ -8,3 +8,9 @@
 
 (global-set-key (kbd &quot;C-w&quot;) 'backward-kill-word)
 (global-set-key (kbd &quot;C-x C-k&quot;) 'kill-region)
+
+;; stop using the arrow keys
+(global-unset-key [left])
+(global-unset-key [up])
+(global-unset-key [right])
+(global-unset-key [down])

[back] 
</code></pre></noscript></div>
</p>

<p>Unbind the arrow keys and it becomes pretty tough to use them.  I
don't use the arrow keys any more.  Maybe your fix is more complicated.
Maybe it's writing an emacs macro for something you do frequently.</p>

<h3>Schedule Time for This</h3>

<p>Its a bad idea to try to fix emacs problems while on a tight deadline
for a project.  However you will find yourself with a spare 30 minutes
or an hour here and there.  Make that your emacs improvement time.</p>

<p>Almost a year ago I found myself with an ever growing emacs problem.
My config files had grown out of control.  They were a huge mess and
impossible to manage.  Even though I was using version control my
config still had lots of local changes and files that weren't tracked
at all.  And my github repo was never up to date. I was in need of a
fresh emacs config.  I needed organization and simplicity.</p>

<p>When would I ever have time to rewrite my entire emacs config?</p>

<p>I started making time on <code>Tue Jun 21 18:18:41 2011 -0400</code> as I had read
about <code>emacs-starter-kit (v2)</code>.  Its basis was emacs-24 paired with
the marmalade-repo (for emacs-lisp packages).  I put in an n hour here
and there over the course of a few months.  In mid September it was good
enough to use as my full-time working config.</p>
]]></content>
  </entry>
  
</feed>
