<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Raw Syntax]]></title>
  <link href="http://rawsyntax.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://rawsyntax.com/"/>
  <updated>2012-11-08T11:30:23-05:00</updated>
  <id>http://rawsyntax.com/</id>
  <author>
    <name><![CDATA[Eric Himmelreich]]></name>
    <email><![CDATA[eric@rawsyntax.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reload your app with Guard and Pow]]></title>
    <link href="http://rawsyntax.com/blog/reload-your-app-with-guard-and-pow/"/>
    <updated>2012-02-22T15:06:00-05:00</updated>
    <id>http://rawsyntax.com/blog/reload-your-app-with-guard-and-pow</id>
    <content type="html"><![CDATA[<p>About 6 months ago I started using <a href="http://pow.cx/">Pow</a> for serving
my apps in development mode.  It loads any RACK compatible app, and
allows you to access your projects via the <code>.dev</code> and named symlinks
stored in <code>~/.pow</code> (for example <code>http://my_project.dev</code>).  No need to
specify a port either!</p>

<!--more-->


<p>Very shortly afterwards I ran into a problem.  When I'm working on a
Sinatra app, normally I use the
<a href="https://github.com/rtomayko/shotgun">shotgun</a> gem for automatic
reloading. I can't do that when I'm running Pow.  So I dug into Pow's
documentation.</p>

<p>Pow supports passenger-style reloads via these commands:</p>

<pre><code>touch tmp/restart.txt
touch tmp/always_restart.txt
</code></pre>

<p>That's somewhat helpful.  However, remembering to run <code>touch tmp/restart.txt</code> every time I make a change is a pain.  Creating <code>tmp/always_restart.txt</code> reloads every time, but makes the app painfully slow.  I don't need a reload for every css / image / js asset that is fetched.</p>

<p><a href="https://github.com/guard/guard">Guard</a> to the rescue!  Guard is a
simple tool.  Watch files; run commands on change.  There is already a
<a href="https://github.com/guard/guard-pow">guard-pow</a> gem.  Which touches
<code>tmp/restart.txt</code> on file change.</p>

<p>To use it, add <code>guard-pow</code> to your Gemfile.  Then define a Guardfile
telling it which files to watch.  Your specific files may differ, but
this works for my needs.</p>

<p><div><script src='https://gist.github.com/1886987.js?file='></script>
<noscript><pre><code>guard 'pow' do
  watch('.rvmrc')
  watch('Gemfile')
  watch('Gemfile.lock')
  watch(%r{^lib/*/.*\.rb$})
  watch(%r{^app/*/.*\.rb$})
end
</code></pre></noscript></div>
</p>

<p>Finally, run <code>bundle exec guard</code>.  It will print when it restarts pow.
I like this approach because it can be adapted to any RACK compatible
app by changing which files get watched.  Also, it doesn't require you
to change any application specific code; It's only necessary to add
guard to the Gemfile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use LiveReload with Rails for faster development]]></title>
    <link href="http://rawsyntax.com/blog/use-livereload-with-rails-for-faster-development/"/>
    <updated>2011-08-15T00:00:00-04:00</updated>
    <id>http://rawsyntax.com/blog/use-livereload-with-rails-for-faster-development</id>
    <content type="html"><![CDATA[<p>LiveReload applies CSS/JS changes to Safari or Chrome without
reloading the page, and automatically reloads when the html changes.
Let that soak in for a minute. In this post I'll go over how to get it
installed and working on your Rails projects.</p>

<!--more-->


<p>The installation process has two steps. First we install a browser extension that listens for livereload events. Then we use guard to listen for  system events and send information to the browser.</p>

<p>First install the livereload addon for <a href="https://chrome.google.com/webstore/detail/jnihajbhpnppcggbcgedagnkighmdlei">chrome</a> or <a href="https://github.com/downloads/mockko/livereload/LiveReload-1.6.2.safariextz">safari</a>.</p>

<p>In your rails project gemfile add</p>

<pre><code>gem 'rb-fsevent'
gem 'guard-livereload'
</code></pre>

<p>Run</p>

<pre><code>bundle install
</code></pre>

<p>Then run</p>

<pre><code>guard init livereload &amp;&amp; guard
</code></pre>

<p>To setup guard for livereload and start monitoring for file system events. The last step is to activate the browser extension. You will need to click the LiveReload button:</p>

<p><img src="http://media.tumblr.com/tumblr_lpzehwqgO41qfdxjm.png"></p>

<p>Now when you change a file in your view, Safari / Chrome will load the new content automatically.</p>

<h2>Notes on RubyCocoa</h2>

<p>The notes on the <a href="https://github.com/mockko/livereload">livereload repo</a> are a little confusing. Livereload can also work via RubyCocoa (instead of guard- livereload). If you're running ruby 1.9.2 you cannot install RubyCocoa on it. RubyCocoa is not 1.9.x compatible. So I opt to use the browser extension and guard.</p>

<p>More info <a href="http://livereload.com/">here</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make your Rails 3 app run faster]]></title>
    <link href="http://rawsyntax.com/blog/make-your-rails-3-app-run-faster/"/>
    <updated>2011-06-20T00:00:00-04:00</updated>
    <id>http://rawsyntax.com/blog/make-your-rails-3-app-run-faster</id>
    <content type="html"><![CDATA[<p>Profile it with <a href="https://github.com/igrigorik/slowgrowl">slowgrowl</a></p>

<p>It will issue growl alerts for slow actions (configurable)</p>

<p><img src="/images/rails-profile.png"></p>

<p>See <a href="https://github.com/igrigorik/slowgrowl">slowgrowl</a> for configuration options.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating Available Domain Names]]></title>
    <link href="http://rawsyntax.com/blog/generating-available-domain-names/"/>
    <updated>2011-04-22T00:00:00-04:00</updated>
    <id>http://rawsyntax.com/blog/generating-available-domain-names</id>
    <content type="html"><![CDATA[<p>It's a ruby script that loads a dictionary of common words, restricts
word length, combines two that start with the same letter, and issues
a whois query to check if it's available. Feel free to tweak it to
your own needs. It also has some sleep calls to avoid flooding the
whois server. Let it run for a couple days, see what comes out.</p>

<!--more-->


<p>I actually generated <a href="http://rawsyntax.com">rawsyntax.com</a> using this script.</p>

<p><div><script src='https://gist.github.com/1360029.js?file='></script>
<noscript><pre><code>#!/usr/bin/env ruby
require 'rubygems'
require 'whois'

module Domaing
  def self.alliterative?(first_word, second_word)
    first_word[0] == second_word[0]
  end

  def self.generate_names(words)
    first  = words[rand(words.size)].strip.downcase
    second = words[rand(words.size)].strip.downcase

    &quot;#{first}#{second}.com&quot; if alliterative?(first, second)
  end

  def self.generate_domains
    words = []

    File.open(&quot;2of12.txt&quot;, &quot;r&quot;).each_line do |l|
      words &lt;&lt; l if l.length &gt; 4 &amp;&amp;  l.length &lt; 7
    end

    domains = []

    while domains.count &lt; 30000
      domain = generate_names(words)
      domains &lt;&lt; domain if domain
    end

    domains.each  do |d|
      sleep 5
      begin
        if Whois.whois(d).available?
          File.open(&quot;domains.txt&quot;, &quot;a&quot;) do |f|
            f.write &quot;#{d}\n&quot;
          end
        end
      rescue
        sleep 100 # to avoid overloading whois servers
      end
    end
  end
end

Domaing.generate_domains
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 Email Validation]]></title>
    <link href="http://rawsyntax.com/blog/rails-3-email-validation/"/>
    <updated>2011-04-21T00:00:00-04:00</updated>
    <id>http://rawsyntax.com/blog/rails-3-email-validation</id>
    <content type="html"><![CDATA[<p>Most email validation I've encountered goes bananas with regards to
regexes. The programmer tries to strictly adhere to the spec
(<a href="http://www.ietf.org/rfc/rfc0822.txt">rfc 822</a>) in a regex. Not only
is this task difficult and error prone, but there are functional email
addresses out there that do not conform to the spec. Not to mention
the resulting regex often looks like
<a href="http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html">this</a>.</p>

<!--more-->


<p>When I do email validation I use a simple regex:</p>

<p><div><script src='https://gist.github.com/934791.js?file='></script>
<noscript><pre><code>/^([\w\.%\+\-]+)@([\w\-]+\.)+([\w]{2,})$/i
</code></pre></noscript></div>

Which I took from the <a href="http://github.com/platformatec/devise">Devise</a> codebase. It means:</p>

<ul>
<li>begins with one or more word characters, period, percent, plus, or dashes</li>
<li>then one at symbol</li>
<li>then one or more word characters, dashes, and then a period</li>
<li>ends with 2 or more word characters</li>
<li>case-insensitive</li>
</ul>


<p>This regex ensures a reasonably close to valid email address, without enumerating and worrying about .com vs .co.uk vs .musem and a host of other issues.</p>

<p>At this point, I have the application send an email to the address, and require the user to click a confirmation link. That's good enough, and very simple to implement.</p>

<p><a href="http://rubular.com/r/YTzbCkatJy">Try this regex out on Rubular</a> it's an interactive web based ruby regex engine.</p>
]]></content>
  </entry>
  
</feed>
